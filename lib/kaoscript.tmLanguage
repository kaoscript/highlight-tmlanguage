<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>kaoscript</string>
    <key>scopeName</key>
    <string>source.ks</string>
    <key>fileTypes</key>
    <array>
      <string>ks</string>
    </array>
    <key>uuid</key>
    <string>371123EB-AE4B-471E-BB5C-1AB23093F1C9</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#extern-statement</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#statements</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>array</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]\)\]])\[</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.array.begin.bracket.square.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.array.end.bracket.square.ks</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.operator.range.ks</string>
            <key>match</key>
            <string>(?&lt;!\.)\&lt;?\.\.\&lt;?(?!\.)</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>for</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.control.loop.for.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>keyword.control.loop.ks</string>
                <key>match</key>
                <string>\b(by|from|in|of|til|to|until|when|while)\b</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>array-accessor</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;=[_$[:alnum:]\)\]])\[</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.accessor.array.begin.bracket.square.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.accessor.array.end.bracket.square.ks</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>attribute</key>
      <dict>
        <key>name</key>
        <string>meta.attribute.ks</string>
        <key>begin</key>
        <string>#!?\[</string>
        <key>end</key>
        <string>\]</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
        </array>
      </dict>
      <key>block</key>
      <dict>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.begin.bracket.curly.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.end.bracket.curly.ks</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#statements</string>
          </dict>
        </array>
      </dict>
      <key>comma</key>
      <dict>
        <key>name</key>
        <string>punctuation.separator.comma.ks</string>
        <key>match</key>
        <string>,</string>
      </dict>
      <key>comment</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>comment.block.documentation.ks</string>
            <key>begin</key>
            <string>/\*\*(?!/)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\*/</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.ks</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment-block</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(^[ \t]+)?(?=//)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.whitespace.comment.leading.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>comment.line.double-slash.ks</string>
                <key>begin</key>
                <string>//</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$)</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>comment.block.header</string>
            <key>begin</key>
            <string>---</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>---</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.ks</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment-block</string>
          </dict>
        </array>
      </dict>
      <key>comment-block</key>
      <dict>
        <key>name</key>
        <string>comment.block.ks</string>
        <key>begin</key>
        <string>/\*</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.comment.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\*/</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.comment.ks</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment-block</string>
          </dict>
        </array>
      </dict>
      <key>const-statement</key>
      <dict>
        <key>begin</key>
        <string>^\s*(const)\s+</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.constant.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>$</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\=)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>$</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#const-statement-variable</string>
          </dict>
        </array>
      </dict>
      <key>const-statement-variable</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.definition.variable.ks variable.other.constant.ks</string>
            <key>match</key>
            <string>[_$[:alpha:]][_$[:alnum:]]*</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\[</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.array.begin.bracket.square.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\]</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.array.end.bracket.square.ks</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#const-statement-variable</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.object.begin.bracket.square.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.object.end.bracket.square.ks</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#const-statement-variable</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.type.annotation.ks</string>
            <key>begin</key>
            <string>(\:)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.annotation.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>$|(?=\s*\=)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#comma</string>
          </dict>
        </array>
      </dict>
      <key>constant</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.language.boolean.$1.ks</string>
            <key>match</key>
            <string>(?&lt;![$\.])\b(true|false)(?!\s*:)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.null.ks</string>
            <key>match</key>
            <string>(?&lt;![$\.])\b(null)(?!\s*:)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.ks</string>
            <key>match</key>
            <string>(?&lt;![$\.])\b(Infinity|NaN)(?!\s*:)\b</string>
          </dict>
        </array>
      </dict>
      <key>create-expression</key>
      <dict>
        <key>begin</key>
        <string>(\bnew\b)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.new.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=$|[\)\]\},])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>entity.name.type.ks</string>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>else-statement</key>
      <dict>
        <key>begin</key>
        <string>^\s*(else\b)(?=\s*\{|$)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.conditional.else.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>else-if-statement</key>
      <dict>
        <key>begin</key>
        <string>(?=^\s*else\s+if\s+)</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>^\s*(else)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.else.ks</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>\b(?=if)\b</string>
            <key>end</key>
            <string>(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#if-statement-body</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>enum-statement</key>
      <dict>
        <key>begin</key>
        <string>^\s*(enum)\s+([_$[:alpha:]][_$[:alnum:]]*)\s+(\{)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.enum.ks</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.enum.ks</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.enum.begin.bracket.curly.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.enum.end.bracket.curly.ks</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>variable.other.enummember.ks</string>
            <key>match</key>
            <string>[_$[:alpha:]][_$[:alnum:]]*</string>
          </dict>
        </array>
      </dict>
      <key>expression</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#array</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#constant</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#number</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#regex</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#template</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#create-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-call-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-call-arguments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-accessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-accessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tagged-template</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#switch-expression</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.other.ks</string>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.brace.round.ks</string>
            <key>match</key>
            <string>[()]</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comma</string>
          </dict>
        </array>
      </dict>
      <key>expression-statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\bif\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.if.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>$</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\bunless\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.unless.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>$</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>expression-without-function</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#array</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#constant</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#number</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#regex</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#template</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#create-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-call-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-call-arguments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-accessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-accessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tagged-template</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.other.ks</string>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.brace.round.ks</string>
            <key>match</key>
            <string>[()]</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comma</string>
          </dict>
        </array>
      </dict>
      <key>extern-statement</key>
      <dict>
        <key>begin</key>
        <string>^(extern)\s+</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.extern.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\}|$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>[_$[:alpha:]][_$[:alnum:]]*</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>variable.other.constant.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\,|$)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>meta.type.annotation.ks</string>
                <key>begin</key>
                <string>(\:)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.type.annotation.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=\s*,|$)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#type</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>function-call-name</key>
      <dict>
        <key>begin</key>
        <string>([_$[:alpha:]][_$[:alnum:]]*)(?=(?:\*[$*])?\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[$*\(])</string>
      </dict>
      <key>function-call-arguments</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;=[_$[:alnum:]\)\]])(\*[$*])?(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.function.scope.ks</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.arguments.begin.bracket.round.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.arguments.end.bracket.round.ks</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>function-expression</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?=(?:(?:\basync\s+)?\bfunc\s*\((?:\s*(?:\.\.\.(?:\{\d*,?\d*\})?)?[_$[:alpha:]][_$[:alnum:]]*(?::\s*[_$[:alpha:]][_$[:alnum:]]*(?:&lt;[_$[:alpha:]][_$[:alnum:]]*&gt;)?(?:\s*\|\s*[_$[:alpha:]][_$[:alnum:]]*(?:&lt;[_$[:alpha:]][_$[:alnum:]]*&gt;)?)*|\?)?(?:\s*=\s*(?:\(.*\)|[^\)])+)?\s*|\s*,\s*)*\)(?::\s*[_$[:alpha:]][_$[:alnum:]]*(?:&lt;[_$[:alpha:]][_$[:alnum:]]*&gt;)?(?:\s*\|\s*[_$[:alpha:]][_$[:alnum:]]*(?:&lt;[_$[:alpha:]][_$[:alnum:]]*&gt;)?)*)?|(?:\basync\s+)?\((?:\s*(?:\.\.\.(?:\{\d*,?\d*\})?)?[_$[:alpha:]][_$[:alnum:]]*(?::\s*[_$[:alpha:]][_$[:alnum:]]*(?:&lt;[_$[:alpha:]][_$[:alnum:]]*&gt;)?(?:\s*\|\s*[_$[:alpha:]][_$[:alnum:]]*(?:&lt;[_$[:alpha:]][_$[:alnum:]]*&gt;)?)*|\?)?(?:\s*=\s*(?:\(.*\)|[^\)])+)?\s*|\s*,\s*)*\)(?::\s*[_$[:alpha:]][_$[:alnum:]]*(?:&lt;[_$[:alpha:]][_$[:alnum:]]*&gt;)?(?:\s*\|\s*[_$[:alpha:]][_$[:alnum:]]*(?:&lt;[_$[:alpha:]][_$[:alnum:]]*&gt;)?)*)?\s*=&gt;\s*|[_$[:alpha:]][_$[:alnum:]]*\s*=&gt;\s*)\s*\{)</string>
            <key>end</key>
            <string>(?&lt;=\}|$)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>storage.modifier.async.ks</string>
                <key>match</key>
                <string>\basync\b</string>
              </dict>
              <dict>
                <key>name</key>
                <string>storage.type.function.ks</string>
                <key>match</key>
                <string>\bfunc\b</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-parameters</string>
              </dict>
              <dict>
                <key>match</key>
                <string>([_$[:alpha:]][_$[:alnum:]]*)(?=\s*=&gt;)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>variable.parameter.ks</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-return-type</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-throwables</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#block</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>(=&gt;)(?=\s*{)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.type.function.arrow.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?&lt;=\}|$)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#block</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?=(?:(?:\basync\s*)?(?:\bfunc\s*)?\((?:\s*(?:\.\.\.(?:\{\d*,?\d*\})?)?[_$[:alpha:]][_$[:alnum:]]*(?::\s*[_$[:alpha:]][_$[:alnum:]]*(?:&lt;[_$[:alpha:]][_$[:alnum:]]*&gt;)?(?:\s*\|\s*[_$[:alpha:]][_$[:alnum:]]*(?:&lt;[_$[:alpha:]][_$[:alnum:]]*&gt;)?)*|\?)?(?:\s*=\s*(?:\(.*\)|[^\)])+)?\s*|\s*,\s*)*\)(?::\s*[_$[:alpha:]][_$[:alnum:]]*(?:&lt;[_$[:alpha:]][_$[:alnum:]]*&gt;)?(?:\s*\|\s*[_$[:alpha:]][_$[:alnum:]]*(?:&lt;[_$[:alpha:]][_$[:alnum:]]*&gt;)?)*)?|[_$[:alpha:]][_$[:alnum:]]*)\s*=&gt;\s*(?!=\{))</string>
            <key>end</key>
            <string>(?=$|[,\)\]])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>storage.type.function.ks</string>
                <key>match</key>
                <string>\bfunc\b</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-parameters</string>
              </dict>
              <dict>
                <key>match</key>
                <string>([_$[:alpha:]][_$[:alnum:]]*)(?=\s*=&gt;)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>variable.parameter.ks</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-return-type</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-throwables</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>=&gt;</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>storage.type.function.arrow.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$|[,\)\]])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>function-parameters</key>
      <dict>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.begin.bracket.round.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.end.bracket.round.ks</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(\.\.\.)(?:(\{)(\d*)(,?)(\d*)(\}))?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.rest.ks</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.rest.begin.bracket.curly</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.decimal.ks</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.comma.ks</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.decimal.ks</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.rest.end.bracket.curly</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>[_$[:alpha:]][_$[:alnum:]]*</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\,|\))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>storage.modifier.nullable.ks</string>
                <key>match</key>
                <string>\?</string>
              </dict>
              <dict>
                <key>name</key>
                <string>meta.type.annotation.ks</string>
                <key>begin</key>
                <string>(\:)(?!\=)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.type.annotation.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=\s*[\=\),])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#type</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>(\=)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.assignment.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=,|\))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#comma</string>
          </dict>
        </array>
      </dict>
      <key>function-return-type</key>
      <dict>
        <key>name</key>
        <string>meta.function.return-type.ks</string>
        <key>begin</key>
        <string>(\:)(?!\=)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.type.annotation.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\s*[\{~=])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>function-statement</key>
      <dict>
        <key>begin</key>
        <string>^\s*(?=\bfunc\s+)</string>
        <key>end</key>
        <string>(?&lt;=\}|$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\b(func)\b\s+([_$[:alpha:]][_$[:alnum:]]*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.function.ks</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{|=&gt;)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#function-parameters</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-return-type</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-throwables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>=&gt;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>storage.type.function.arrow.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>$</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>function-throwables</key>
      <dict>
        <key>name</key>
        <string>meta.throwables.ks</string>
        <key>begin</key>
        <string>(\~)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.throwables.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\s*[\{=])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comma</string>
          </dict>
        </array>
      </dict>
      <key>for-statement</key>
      <dict>
        <key>begin</key>
        <string>^\s*(for)\s+</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.for.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>const</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>storage.type.constant.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\bfrom\b|\bin\b|\bof\b)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#const-statement-variable</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>let</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>storage.type.readwrite.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\bfrom\b|\bin\b|\bof\b)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#let-statement-variable</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.loop.from.ks</string>
            <key>match</key>
            <string>\bfrom\b(?!=[\[\]\(\)\.])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.loop.til.ks</string>
            <key>match</key>
            <string>\btil\b(?!=[\[\]\(\)\.])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.loop.to.ks</string>
            <key>match</key>
            <string>\bto\b(?!=[\[\]\(\)\.])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.loop.by.ks</string>
            <key>match</key>
            <string>\bby\b(?!=[\[\]\(\)\.])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.loop.in.ks</string>
            <key>match</key>
            <string>\bin\b(?!=[\[\]\(\)\.])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.loop.desc.ks</string>
            <key>match</key>
            <string>\bdesc\b(?!=[\[\]\(\)\.])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.loop.of.ks</string>
            <key>match</key>
            <string>\bof\b(?!=[\[\]\(\)\.])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.loop.while.ks</string>
            <key>match</key>
            <string>\bwhile\b(?!=[\[\]\(\)\.])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.loop.until.ks</string>
            <key>match</key>
            <string>\buntil\b(?!=[\[\]\(\)\.])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.conditional.when.ks</string>
            <key>match</key>
            <string>\bwhen\b(?!=[\[\]\(\)\.])</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.range.ks</string>
            <key>match</key>
            <string>(?&lt;!\.)\&lt;?\.\.\&lt;?(?!\.)</string>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.separator.alternative-value.ks</string>
            <key>match</key>
            <string>:</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>if-statement</key>
      <dict>
        <key>begin</key>
        <string>(?=^\s*if\s+)</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#if-statement-body</string>
          </dict>
        </array>
      </dict>
      <key>if-statement-body</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\b(if)\s+(const)\s*(\{)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.if.ks</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.type.constant.ks</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.object.begin.bracket.square.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?&lt;=\{)</string>
                <key>end</key>
                <string>\}</string>
                <key>endCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.binding-pattern.object.end.bracket.square.ks</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#const-statement-variable</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>(\=)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.assignment.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=\{)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\b(if)\s+(const)(?=\s+[_$[:alpha:]\[])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.if.ks</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.type.constant.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#const-statement-variable</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>(\=)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.assignment.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=\{)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\b(if)\s+(let)\s*(\{)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.if.ks</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.type.readwrite.ks</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.object.begin.bracket.square.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?&lt;=\{)</string>
                <key>end</key>
                <string>\}</string>
                <key>endCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.binding-pattern.object.end.bracket.square.ks</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#let-statement-variable</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>(\:?\=)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.assignment.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=\{)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\b(if)\s+(let)(?=\s+[_$[:alpha:]\[])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.if.ks</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.type.readwrite.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#let-statement-variable</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>(\:?\=)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.assignment.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=\{)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\b(if)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.if.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>let-statement</key>
      <dict>
        <key>begin</key>
        <string>^\s*(let)\s+</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.readwrite.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>$</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\:?\=)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$|\bif\b|\bunless\b)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\bif\b)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.if.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>$</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\bunless\b)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.unless.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>$</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#let-statement-variable</string>
          </dict>
        </array>
      </dict>
      <key>let-statement-variable</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.definition.variable.ks variable.other.readwrite.ks</string>
            <key>match</key>
            <string>[_$[:alpha:]][_$[:alnum:]]*</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\[</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.array.begin.bracket.square.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\]</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.array.end.bracket.square.ks</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#let-statement-variable</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.object.begin.bracket.square.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.object.end.bracket.square.ks</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#let-statement-variable</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.type.annotation.ks</string>
            <key>begin</key>
            <string>(:)(?!=)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.annotation.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>$|(?=\s*\:?\=)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#comma</string>
          </dict>
        </array>
      </dict>
      <key>number</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.numeric.binary.ks</string>
            <key>match</key>
            <string>\b0(b|B)[01]+\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.octal.ks</string>
            <key>match</key>
            <string>\b0(o|O)[0-7]+\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.hex.ks</string>
            <key>match</key>
            <string>\b0(x|X)[0-9a-fA-F]+\b</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b[0-9]+(?:(\.)[0-9]+)?\b</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.decimal.ks</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.delimiter.decimal.period.ks</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>object</key>
      <dict>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.object.begin.bracket.curly.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.object.end.bracket.curly.ks</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)\s*(\:)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.object.key.ks</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.key-value.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$|\,|\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?=['"`\[])</string>
            <key>end</key>
            <string>(?=$|\,|\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>meta.object-literal.key.ks</string>
                <key>begin</key>
                <string>(?=['"`\[])</string>
                <key>end</key>
                <string>(?=:)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>\:</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.key-value.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$|\,|\})</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.definition.method.ks</string>
            <key>begin</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\}|$)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#function-expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.other.ks</string>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comma</string>
          </dict>
        </array>
      </dict>
      <key>object-accessor</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)(?!\.)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.object.ks</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.object.ks</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=[_$[:alnum:]\)\]]\.)([_$[:alpha:]][_$[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.property.ks</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>operator</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.compound.ks</string>
            <key>match</key>
            <string>\+=|-=|\*=|(?&lt;!\()/=|%=|\?\?=|\?=</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.compound.bitwise.ks</string>
            <key>match</key>
            <string>&lt;&lt;=|&gt;&gt;=|&gt;&gt;=|&amp;=|\^=|\|=</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.comparison.ks</string>
            <key>match</key>
            <string>&lt;=|&gt;=|==|&lt;|&gt;|!=</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.ks</string>
            <key>match</key>
            <string>\|\||&amp;&amp;|!</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.bitwise.ks</string>
            <key>match</key>
            <string>\^|~|&amp;|\|</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.ks</string>
            <key>match</key>
            <string>=|:=</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.decrement.ks</string>
            <key>match</key>
            <string>--</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.increment.ks</string>
            <key>match</key>
            <string>\+\+</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.spread.ks</string>
            <key>match</key>
            <string>\.\.\.</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.ks</string>
            <key>match</key>
            <string>\+|-|\*|/|%|\?|\:</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow</string>
            <key>match</key>
            <string>\bawait\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.type-checking</string>
            <key>match</key>
            <string>\bis(?:\s+not)?\b</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=[_$[:alnum:]\)\]])\s*(if\b)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.if.ks</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=[_$[:alnum:]\)\]])\s*(else\b)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.else.ks</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>regex</key>
      <dict>
        <key>name</key>
        <string>string.regexp.ks</string>
        <key>begin</key>
        <string>(?&lt;=[\[=(?:+,!]|^|return|=&gt;|&amp;&amp;|\|\|)\s*(/)(?![/*+?])(?=.*/)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(/)[gimuy]*</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.ks</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#regexp</string>
          </dict>
        </array>
      </dict>
      <key>regexp</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.control.anchor.regexp</string>
            <key>match</key>
            <string>\\[bB]|\^|\$</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\\[1-9]\d*|\\k&lt;([a-zA-Z_$][\w$]*)&gt;</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.other.back-reference.regexp</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.regexp</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.quantifier.regexp</string>
            <key>match</key>
            <string>[?+*]|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.or.regexp</string>
            <key>match</key>
            <string>\|</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.group.assertion.regexp</string>
            <key>begin</key>
            <string>(\()((\?=)|(\?!)|(\?&lt;=)|(\?&lt;!))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.assertion.regexp</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>meta.assertion.look-ahead.regexp</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>meta.assertion.negative-look-ahead.regexp</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>meta.assertion.look-behind.regexp</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>meta.assertion.negative-look-behind.regexp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#regexp</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.group.regexp</string>
            <key>begin</key>
            <string>\((?:(\?:)|(?:\?&lt;([a-zA-Z_$][\w$]*)&gt;))?</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.no-capture.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.other.regexp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#regexp</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.other.character-class.set.regexp</string>
            <key>begin</key>
            <string>(\[)(\^)?</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.character-class.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.negation.regexp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.character-class.regexp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>constant.other.character-class.range.regexp</string>
                <key>match</key>
                <string>(?:.|(\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\c[A-Z])|(\\.))\-(?:[^\]\\]|(\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\c[A-Z])|(\\.))</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>constant.character.numeric.regexp</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>constant.character.control.regexp</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>constant.character.escape.backslash.regexp</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>constant.character.numeric.regexp</string>
                  </dict>
                  <key>5</key>
                  <dict>
                    <key>name</key>
                    <string>constant.character.control.regexp</string>
                  </dict>
                  <key>6</key>
                  <dict>
                    <key>name</key>
                    <string>constant.character.escape.backslash.regexp</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#regex-character-class</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#regex-character-class</string>
          </dict>
        </array>
      </dict>
      <key>regex-character-class</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.other.character-class.regexp</string>
            <key>match</key>
            <string>\\[wWsSdDtrnvf]|\.</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.numeric.regexp</string>
            <key>match</key>
            <string>\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.control.regexp</string>
            <key>match</key>
            <string>\\c[A-Z]</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.escape.backslash.regexp</string>
            <key>match</key>
            <string>\\.</string>
          </dict>
        </array>
      </dict>
      <key>return-expression</key>
      <dict>
        <key>begin</key>
        <string>(\breturn)\s+</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.return.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>$</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>return-statement</key>
      <dict>
        <key>begin</key>
        <string>^\s*(return)\s+</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.return.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>$</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\bif\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.if.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>$</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>\belse\b</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.conditional.else.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>$</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\bunless\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.unless.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>$</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>statements</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#const-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#else-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#else-if-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#enum-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#for-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#if-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#let-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#return-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#switch-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#throw-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#trycatch-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#unless-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#until-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#while-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-statement</string>
          </dict>
        </array>
      </dict>
      <key>string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>string.quoted.single.ks</string>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>'</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.ks</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#string-escapes</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>string.quoted.double.ks</string>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.ks</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#string-escapes</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>`</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.template.begin.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>`</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.template.end.ks</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#template</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#string-escapes</string>
              </dict>
              <dict>
                <key>name</key>
                <string>string.template.ks</string>
                <key>match</key>
                <string>(?:[^\\`]|\\(?:[^\(]|$))*</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>string-escapes</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>invalid.illegal.unicode-escape.ks</string>
            <key>match</key>
            <string>\\u(?![A-Fa-f0-9]{4}|{[A-Fa-f0-9]+})[^'"]*</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.escape.ks</string>
            <key>match</key>
            <string>\\u(?:[A-Fa-f0-9]{4}|({)([A-Fa-f0-9]+)(}))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.unicode-escape.begin.bracket.curly.ks</string>
              </dict>
              <key>2</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>name</key>
                    <string>invalid.illegal.unicode-escape.ks</string>
                    <key>match</key>
                    <string>[A-Fa-f\d]{7,}|(?!10)[A-Fa-f\d]{6}</string>
                  </dict>
                </array>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.unicode-escape.end.bracket.curly.ks</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.escape.ks</string>
            <key>match</key>
            <string>\\(x\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)</string>
          </dict>
        </array>
      </dict>
      <key>switch-clause</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>with</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.control.switch.binding.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\bwhere\b|=&gt;)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression-without-function</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>where</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.control.switch.binding-condition.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?==&gt;)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression-without-function</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>=&gt;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.control.switch.body.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=$|\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#block</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#return-expression</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#throw-expression</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-without-function</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.range.ks</string>
            <key>match</key>
            <string>(?&lt;!\.)\&lt;?\.\.\&lt;?(?!\.)</string>
          </dict>
        </array>
      </dict>
      <key>switch-expression</key>
      <dict>
        <key>begin</key>
        <string>(\bswitch\b)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.switch.switch.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.switch.begin.bracket.curly.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.switch.end.bracket.curly.ks</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#switch-clause</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>switch-statement</key>
      <dict>
        <key>begin</key>
        <string>^\s*(switch)\s+</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.switch.switch.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.switch.begin.bracket.curly.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.switch.end.bracket.curly.ks</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#switch-clause</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>tagged-template</key>
      <dict>
        <key>match</key>
        <string>([_$[:alpha:]][_$[:alnum:]]*)(?=`)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.tagged-template.ks</string>
          </dict>
        </dict>
      </dict>
      <key>template</key>
      <dict>
        <key>begin</key>
        <string>\\\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.template-expression.begin.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.template-expression.end.ks</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>throw-expression</key>
      <dict>
        <key>begin</key>
        <string>(\bthrow)\s+</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.trycatch.throw.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>$</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>throw-statement</key>
      <dict>
        <key>begin</key>
        <string>^\s*(throw)\s+</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.trycatch.throw.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>$</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>trycatch-statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>^\s*(try\b)\s*(?=\{)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.trycatch.try.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#block</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>^\s*(catch\b)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.trycatch.catch.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#block</string>
              </dict>
              <dict>
                <key>name</key>
                <string>variable.parameter.ks</string>
                <key>match</key>
                <string>[_$[:alpha:]][_$[:alnum:]]*</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>^\s*(finally\b)\s*(?=\{)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.trycatch.finally.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#block</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>^\s*(on\b)\s+(\b[_$[:alpha:]][_$[:alnum:]]*\b)\s*(?:(\bcatch)\s+([_$[:alpha:]][_$[:alnum:]]*))?</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.trycatch.on.ks</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.ks</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.control.trycatch.catch.ks</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#block</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>type</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>support.type.primitive.ks</string>
            <key>match</key>
            <string>\b(Any|any|Array|array|Boolean|bool|class|enum|Function|func(?!\()|Number|number|Object|object|RegExp|String|string|Void|void)\b</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?=(\basync\s+)?(\bfunc)?\()</string>
            <key>end</key>
            <string>(?=$|\s*\|\|)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>storage.modifier.async.ks</string>
                <key>match</key>
                <string>\basync\b</string>
              </dict>
              <dict>
                <key>name</key>
                <string>storage.type.function.ks</string>
                <key>match</key>
                <string>\bfunc\b</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-parameters</string>
              </dict>
              <dict>
                <key>name</key>
                <string>meta.function.return-type.ks</string>
                <key>begin</key>
                <string>:</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.type.annotation.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$|\s*~|\s*\|\|)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#type</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>name</key>
                <string>meta.throwables.ks</string>
                <key>begin</key>
                <string>(\~)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.modifier.throwables.ks</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=$|\s*\|\|)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#type</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#comma</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>entity.name.type.ks</string>
            <key>match</key>
            <string>[_$[:alpha:]][_$[:alnum:]]*</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.modifier.nullable.ks</string>
            <key>match</key>
            <string>\?</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\|\|?)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.union.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$|[,:=\{\)])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\&lt;)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.typeparameters.begin.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\&gt;)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.typeparameters.end.ks</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\{)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.object.begin.bracket.curly.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\})</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.object.end.bracket.curly.ks</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-object</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>type-object</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#function-parameters</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)(:)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.object.property.ks</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.annotation.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$|,|\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#comma</string>
          </dict>
        </array>
      </dict>
      <key>type-statement</key>
      <dict>
        <key>begin</key>
        <string>^\s*(type)\s+([_$[:alpha:]][_$[:alnum:]]*)\s*(=)(?m)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.type.ks</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.alias.ks</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.ks</string>
          </dict>
        </dict>
        <key>end</key>
        <string>$</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>unless-statement</key>
      <dict>
        <key>begin</key>
        <string>(?=^\s*unless\s+)</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\b(unless)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.unless.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>until-statement</key>
      <dict>
        <key>begin</key>
        <string>(?=^\s*until\s+)</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\b(until)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.loop.until.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>while-statement</key>
      <dict>
        <key>begin</key>
        <string>(?=^\s*while\s+)</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\b(while)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.loop.while.ks</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\{)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>