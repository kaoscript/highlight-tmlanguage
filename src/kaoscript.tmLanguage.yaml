name: kaoscript
scopeName: source.ks
fileTypes: [ks]
uuid: 371123EB-AE4B-471E-BB5C-1AB23093F1C9

variables:
  expression-beginning: '[\{\[\("''`_$[:alnum:]\.\/@?!~+-]'
  expression-ending: '[\{\}\]\)\|\^\-\*\.~+=!<>%&]|^$'
  identifier: '[_$[:alpha:]][_$[:alnum:]]*'
  match-identifier: '\s+(?=[_$[:alpha:]])'
  function-block: '(?:(?:\basync\s+)?\bfunc\s*{{function-sig}}|(?:\basync\s+)?{{function-sig}}\s*=>|{{identifier}}\s*=>\s*)\s*\{'
  function-line: '(?:(?:\basync\s*)?(?:\bfunc\s*)?{{function-sig}}|{{identifier}})\s*=>\s*(?!\{)'
  function-sig: '\((\s*,)*(?:\s*{{parameter}}\s*,)*\s*(?:{{parameter}})?\s*\)(?:{{type}})?(\s+~\s+{{identifier}}(?:\s*,\s*{{identifier}})*)?'
  parameter: '(?:\.\.\.(?:\{\d*,?\d*\})?)?{{identifier}}(?:{{type}}|\?)?(?:\s*=\s*(?:\(.*\)|[^\)])+)?'
  type: ':\s*{{type-identifier}}(?:\s*\|\s*{{type-identifier}})*'
  type-identifier: '{{identifier}}(?:<{{identifier}}>)?'

patterns:
- include: '#disclose-statement'
- include: '#export-statement'
- include: '#extern-statement'
- include: '#extern-import-statement'
- include: '#extern-require-statement'
- include: '#import-statement'
- include: '#include-statement'
- include: '#require-statement'
- include: '#require-extern-statement'
- include: '#require-import-statement'
- include: '#statements'

repository:
  array: # {{{
    begin: '(?<![_$[:alnum:]\)\]])\['
    beginCaptures:
      '0': { name: 'punctuation.definition.array.begin.bracket.square.ks' }
    end: '\]'
    endCaptures:
      '0': { name: 'punctuation.definition.array.end.bracket.square.ks' }
    patterns:
    - name: 'keyword.operator.range.ks'
      match: '(?<!\.)\<?\.\.\<?(?!\.)'
    - begin: '\bfor\b'
      beginCaptures:
        '0': { name: 'keyword.control.loop.for.ks' }
      end: (?=\])
      patterns:
      - begin: '\bconst\b'
        beginCaptures:
          '0': { name: 'storage.type.constant.ks' }
        end: '(?=\bfrom\b|\bin\b|\bof\b)'
        patterns:
        - include: '#const-statement-variable'
      - begin: '\blet\b'
        beginCaptures:
          '0': { name: 'storage.type.readwrite.ks' }
        end: '(?=\bfrom\b|\bin\b|\bof\b)'
        patterns:
        - include: '#let-statement-variable'
      - name: 'keyword.control.loop.ks'
        match: '\b(by|desc|from|in|of|til|to|until|when|while)\b'
      - name: 'keyword.operator.range.ks'
        match: '(?<!\.)\<?\.\.\<?(?!\.)'
      - include: '#expression'
    - include: '#expression'
  # }}}
  array-accessor: # {{{
    begin: '(?<=[_$[:alnum:]\)\]])(\?)?(\[)'
    beginCaptures:
      '1': { name: 'keyword.operator.nullable.ks' }
      '2': { name: 'punctuation.accessor.array.begin.bracket.square.ks' }
    end: '\]'
    endCaptures:
      '0': { name: 'punctuation.accessor.array.end.bracket.square.ks' }
    patterns:
    - include: '#expression'
  # }}}
  attribute: # {{{
    name: meta.attribute.ks
    begin: '(?:(#)|(#!))(\[)'
    beginCaptures:
      '1': { name: 'punctuation.attribute.outer.ks' }
      '2': { name: 'punctuation.attribute.inner.ks' }
      '3': { name: 'punctuation.definition.attribute.begin.bracket.square.ks' }
    end: \]
    endCaptures:
      '0': { name: 'punctuation.definition.attribute.end.bracket.square.ks' }
    patterns:
    - include: '#attribute-expression'
  attribute-expression:
    patterns:
    - begin: '({{identifier}})\s*(\()'
      beginCaptures:
        '1': { name: 'entity.name.function.ks' }
        '2': { name: 'punctuation.definition.arguments.begin.bracket.round.ks' }
      end: '\)'
      endCaptures:
        '0': { name: 'punctuation.definition.arguments.end.bracket.round.ks' }
      patterns:
      - include: '#attribute-expression'
    - name: 'entity.name.ks'
      match: '[_$[:alpha:]][-\._$[:alnum:]]*'
    - include: '#string'
    - include: '#comma'
  # }}}
  auto-statement: # {{{
    begin: '\b(auto)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'storage.type.readwrite.ks' }
    end: '$'
    patterns:
    - begin: '(=)'
      beginCaptures:
        '1': { name: 'keyword.operator.assignment.ks' }
      end: '$'
      patterns:
      - include: '#if-else-expression'
      - include: '#unless-expression'
      - include: '#expression'
    - include: '#let-statement-variable'
  # }}}
  binary-operator: # {{{
    patterns:
    - begin: '(\|\||&&|\^\^|->|!)\s*(?={{expression-beginning}})'
      beginCaptures:
        '1': { name: 'keyword.operator.logical.ks' }
      end: '(?={{expression-beginning}})'
    - begin: '(\|\||&&|\^\^|->|!)\s*(?=\/\/|$)'
      beginCaptures:
        '1': { name: 'keyword.operator.logical.ks' }
      end: '(?={{expression-ending}})'
      patterns:
      - include: '#expression'
    - name: 'keyword.operator.junctive.ks'
      match: '&|\||\^'
    - begin: '(\+|-|\*|/\.|/|%)\s*(?={{expression-beginning}})'
      beginCaptures:
        '1': { name: 'keyword.operator.arithmetic.ks' }
      end: '(?={{expression-beginning}})'
    - begin: '(\+|-|\*|/\.|/|%)\s*(?=\/\/|$)'
      beginCaptures:
        '1': { name: 'keyword.operator.arithmetic.ks' }
      end: '(?={{expression-ending}})'
      patterns:
      - include: '#expression'
    - begin: '(?<!\.)(\.)(?!\.)\s*(?={{expression-beginning}})'
      beginCaptures:
        '1': { name: 'punctuation.accessor.object.ks' }
      end: '(?={{expression-beginning}})'
    - begin: '(?<!\.)(\.)(?!\.)\s*(?=\/\/|$)'
      beginCaptures:
        '1': { name: 'punctuation.accessor.object.ks' }
      end: '(?={{expression-ending}})'
      patterns:
      - include: '#expression'
  # }}}
  binding-array: # {{{
    begin: '\['
    beginCaptures:
      '0': { name: 'punctuation.definition.binding-pattern.array.begin.bracket.square.ks' }
    end: '\]'
    endCaptures:
      '0': { name: 'punctuation.definition.binding-pattern.array.end.bracket.square.ks' }
    patterns:
    - name: 'variable.anonymous.ks'
      match: '\b\_\b'
    - name: 'variable.other.ks'
      match: '{{identifier}}'
    - begin: '='
      beginCaptures:
        '0': { name: 'keyword.operator.assignment.ks' }
      end: '(?=[\},])'
      patterns:
      - include: '#expression'
    - name: 'keyword.operator.rest.ks'
      match: '\.\.\.'
    - include: '#comma'
    - include: '#comment'
  # }}}
  binding-object: # {{{
    begin: '\{'
    beginCaptures:
      '0': { name: 'punctuation.definition.binding-pattern.object.begin.bracket.curly.ks' }
    end: '\}'
    endCaptures:
      '0': { name: 'punctuation.definition.binding-pattern.object.end.bracket.curly.ks' }
    patterns:
    - include: '#binding-object-elements'
    - include: '#comment'
  # }}}
  binding-object-elements: # {{{
    patterns:
    - match: '(\.\.\.)?\s*(\b{{identifier}}\b)'
      captures:
        '1': { name: 'keyword.operator.rest.ks' }
        '2': { name: 'variable.other.ks' }
    - begin: '='
      beginCaptures:
        '0': { name: 'keyword.operator.assignment.ks' }
      end: '(?=[\},])'
      patterns:
      - include: '#expression'
    - name: 'meta.object-literal.key.ks'
      begin: (?=['"`\[])
      end: (?=:)
      patterns:
      - include: '#expression'
    - begin: ':'
      beginCaptures:
        '0': { name: 'punctuation.separator.key-value.ks' }
      end: '(?=[\},$])'
      patterns:
      - name: 'variable.other.ks'
        match: '{{identifier}}'
      - begin: '='
        beginCaptures:
          '0': { name: 'keyword.operator.assignment.ks' }
        end: '(?=[\},])'
        patterns:
        - include: '#expression'
      - include: '#binding-object'
    - include: '#comma'
  # }}}
  block: # {{{
    begin: '\{'
    beginCaptures:
      '0': { name: 'punctuation.definition.block.begin.bracket.curly.ks' }
    end: '\}'
    endCaptures:
      '0': { name: 'punctuation.definition.block.end.bracket.curly.ks' }
    patterns:
    - include: '#statements'
  # }}}
  break-statement: # {{{
    begin: '^\s*(break\b)'
    beginCaptures:
      '1': { name: 'keyword.control.loop.break.ks' }
    end: '$'
  # }}}
  class-member: # {{{
    patterns:
    - begin: '(constructor)(?=\()'
      beginCaptures:
        '1': { name: 'storage.type.constructor.ks' }
      end: '(?<=\}|$)'
      patterns:
      - include: '#function-parameters'
      - include: '#function-throwables'
      - include: '#block'
      - begin: '=>'
        beginCaptures:
          '0': { name: 'storage.type.function.arrow.ks' }
        end: '$'
        patterns:
        - include: '#expression'
    - begin: '(destructor)(?=\()'
      beginCaptures:
        '1': { name: 'storage.type.destructor.ks' }
      end: '(?<=\})'
      patterns:
      - name: 'punctuation.definition.parameters.begin.bracket.round.ks'
        match: '\('
      - name: 'punctuation.definition.parameters.end.bracket.round.ks'
        match: '\)'
      - include: '#block'
    - begin: '\b(internal|private|protected|public)\s+(\{)'
      beginCaptures:
        '1': { name: 'storage.modifier.access.ks' }
        '2': { name: 'punctuation.definition.members.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.members.end.bracket.curly.ks' }
      patterns:
      - include: '#class-member'
    - begin: '(?:\b(internal|private|protected|public)\b)?\s*(?:(\babstract)|(\blateinit)|(\boverride)|(\bstatic))\s+(\{)'
      beginCaptures:
        '1': { name: 'storage.modifier.access.ks' }
        '2': { name: 'storage.modifier.abstract.ks' }
        '3': { name: 'storage.modifier.ks' }
        '4': { name: 'storage.modifier.ks' }
        '5': { name: 'storage.modifier.access.ks' }
        '6': { name: 'punctuation.definition.members.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.members.end.bracket.curly.ks' }
      patterns:
      - include: '#class-member'
    - begin: '(?:\b(internal|private|protected|public)\b\s*)?(\bfinal\b\s*)?(?:(\babstract\b)\s*|(\bstatic\b)\s*|(\boverride\b)\s*)?(?:(\basync)\s*)?({{identifier}})(?=\()'
      beginCaptures:
        '1': { name: 'storage.modifier.access.ks' }
        '2': { name: 'storage.modifier.ks' }
        '3': { name: 'storage.modifier.abstract.ks' }
        '4': { name: 'storage.modifier.access.ks' }
        '5': { name: 'storage.modifier.ks' }
        '6': { name: 'storage.modifier.async.ks' }
        '7': { name: 'entity.name.function.ks' }
      end: '(?<=\})|$|(?=\})'
      patterns:
      - include: '#function-parameters'
      - include: '#method-return-type'
      - include: '#function-throwables'
      - include: '#block'
      - begin: '=>'
        beginCaptures:
          '0': { name: 'storage.type.function.arrow.ks' }
        end: '(?=\}|$)'
        patterns:
        - include: '#expression'
    - begin: '(?:\b(internal|private|protected|public)\b\s*)?(?:\b(static)\b\s*)?({{identifier}})\s*(?=\{)'
      beginCaptures:
        '1': { name: 'storage.modifier.access.ks' }
        '2': { name: 'storage.modifier.access.ks' }
        '3': { name: 'entity.name.variable.property.ks' }
      end: '$'
      patterns:
      - include: '#class-property'
    - begin: '(?:\b(internal|private|protected|public)\b\s*)?(?:\b(static)\b\s*)?({{identifier}})\s*(?=:\s*{{identifier}}\s*\{)'
      beginCaptures:
        '1': { name: 'storage.modifier.access.ks' }
        '2': { name: 'storage.modifier.access.ks' }
        '3': { name: 'entity.name.variable.property.ks' }
      end: '$'
      patterns:
      - name: 'meta.type.annotation.ks'
        begin: ':'
        beginCaptures:
          '0': { name: 'keyword.operator.type.annotation.ks' }
        end: '(?=\s*\{)'
        patterns:
        - include: '#type'
      - include: '#class-property'
    - begin: '(?:\b(internal|private|protected|public)\b\s*)?(?:\b(static)\b\s*)?(?:\b(lateinit)\b\s*)?(?:\b(auto)\b\s*|\b(const)\b\s*)?(@)?({{identifier}})'
      beginCaptures:
        '1': { name: 'storage.modifier.access.ks' }
        '2': { name: 'storage.modifier.access.ks' }
        '3': { name: 'storage.modifier.ks' }
        '4': { name: 'storage.type.auto.ks' }
        '5': { name: 'storage.type.constant.ks' }
        '6': { name: 'storage.modifier.instance.ks' }
        '7': { name: 'entity.name.variable.field.ks' }
      end: '$'
      patterns:
      - name: 'meta.type.annotation.ks'
        begin: ':'
        beginCaptures:
          '0': { name: 'keyword.operator.type.annotation.ks' }
        end: '(?=$|=)'
        patterns:
        - include: '#type'
      - begin: '='
        beginCaptures:
          '0': { name: 'keyword.operator.assignment.ks' }
        end: '$'
        patterns:
        - include: '#expression'
    - include: '#attribute'
    - include: '#comment'
    - begin: '(\|\||&&|\^\^|->|!)'
      beginCaptures:
        '1': { name: 'keyword.operator.logical.ks' }
      end: '(?={{expression-ending}})'
      patterns:
      - include: '#expression'
    - include: '#block'
    - begin: '=>'
      beginCaptures:
        '0': { name: 'storage.type.function.arrow.ks' }
      end: '(?=\}|$)'
      patterns:
      - include: '#expression'
    - include: '#expression'
  # }}}
  class-property: # {{{
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.property.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.property.end.bracket.curly.ks' }
      patterns:
      - begin: '\bget\b'
        beginCaptures:
          '0': { name: 'keyword.other.property.get.ks' }
        end: '(?=$|[\},])'
        patterns:
        - include: '#block'
        - begin: '=>'
          beginCaptures:
            '0': { name: 'storage.type.function.arrow.ks' }
          end: '$'
          patterns:
          - include: '#expression'
      - begin: '\bset\b'
        beginCaptures:
          '0': { name: 'keyword.other.property.set.ks' }
        end: '(?=$|[\},])'
        patterns:
        - include: '#block'
        - begin: '=>'
          beginCaptures:
            '0': { name: 'storage.type.function.arrow.ks' }
          end: '$'
          patterns:
          - include: '#expression'
      - include: '#comma'
    - begin: '='
      beginCaptures:
        '0': { name: 'keyword.operator.assignment.ks' }
      end: '$'
      patterns:
      - include: '#expression'
  # }}}
  class-statement: # {{{
    begin: '(?:(\bsealed|\bfinal)\s+)?(?:(\babstract)\s+)?(\bclass){{match-identifier}}'
    beginCaptures:
      '1': { name: 'storage.modifier.ks' }
      '2': { name: 'storage.modifier.abstract.ks' }
      '3': { name: 'storage.type.class.ks' }
    end: '(?<=\})'
    patterns:
    - name: 'storage.modifier.extends.ks'
      match: '\bextends\b'
    - match: '({{identifier}})(\.)'
      captures:
        '1': { name: 'variable.other.object.ks' }
        '2': { name: 'punctuation.accessor.object.ks' }
    - name: 'entity.name.type.class.ks'
      match: '{{identifier}}'
    - include: '#type-generic'
    - match: '(@)(\d+(?:\.\d+(?:\.\d+)?)?)'
      captures:
        '1': { name: 'punctuation.separator.version.ks' }
        '2': { name: 'storage.modifier.version.ks' }
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.class.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.class.end.bracket.curly.ks' }
      patterns:
      - include: '#macro-statement'
      - include: '#class-member'
  # }}}
  comma: # {{{
    name: 'punctuation.separator.comma.ks'
    match: ','
  # }}}
  comment: # {{{
    patterns:
    - name: comment.block.documentation.ks
      begin: '\/\*\*(?!\/)'
      beginCaptures:
        '0': {name: punctuation.definition.comment.ks}
      end: '\*\/'
      endCaptures:
        '0': {name: punctuation.definition.comment.ks}
      patterns:
      - include: '#comment-block'
    - begin: '(^[ \t]+)?(?=//)'
      beginCaptures:
        '1': {name: punctuation.whitespace.comment.leading.ks}
      end: '(?=$)'
      patterns:
        - name: comment.line.double-slash.ks
          begin: '//'
          beginCaptures:
            '0': {name: punctuation.definition.comment.ks}
          end: '(?=$)'
    - name: comment.block.header
      begin: '---'
      beginCaptures:
        '0': {name: punctuation.definition.comment.ks}
      end: '---'
      endCaptures:
        '0': {name: punctuation.definition.comment.ks}
    - include: '#comment-block'
  # }}}
  comment-block: # {{{
    name: comment.block.ks
    begin: '\/\*'
    beginCaptures:
      '0': {name: punctuation.definition.comment.ks}
    end: '\*\/'
    endCaptures:
      '0': {name: punctuation.definition.comment.ks}
    patterns:
    - include: '#comment-block'
  # }}}
  const-statement: # {{{
    begin: '\b(const)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'storage.type.constant.ks' }
    end: '$'
    patterns:
    - begin: '(=)'
      beginCaptures:
        '1': { name: 'keyword.operator.assignment.ks' }
      end: '$'
      patterns:
      - include: '#expression'
    - include: '#const-statement-variable'
  # }}}
  const-statement-variable: # {{{
    patterns:
    - include: '#binding-array'
    - include: '#binding-object'
    - name: 'variable.anonymous.ks'
      match: '\b\_\b'
    - name: 'meta.definition.variable.ks variable.other.constant.ks'
      match: '{{identifier}}'
    - name: 'meta.type.annotation.ks'
      begin: '(\:)'
      beginCaptures:
        '1': { name: 'keyword.operator.type.annotation.ks' }
      end: '$|(?=\s*(?:=|,|in|of))'
      patterns:
      - include: '#type'
    - include: '#comma'
  # }}}
  constant: # {{{
    patterns:
    - name: constant.language.boolean.$1.ks
      match: (?<![$\.])\b(true|false)\b
    - name: constant.language.null.ks
      match: (?<![$\.])\b(null)\b
    - name: constant.language.ks
      match: (?<![$\.])\b(Infinity|NaN)\b
  # }}}
  continue-statement: # {{{
    begin: '^\s*(continue\b)'
    beginCaptures:
      '1': { name: 'keyword.control.loop.continue.ks' }
    end: '$'
  # }}}
  create-expression: # {{{
    patterns:
    - begin: '(?<![\.\]\)])(\bnew)\s+({{identifier}})(?=\(|$)'
      beginCaptures:
        '1': { name: 'keyword.operator.new.ks' }
        '2': { name: 'entity.name.type.ks' }
      end: '(?<=$|[\)\]\},])'
      patterns:
      - include: '#expression'
    - begin: '(?<![\.\]\)])\bnew\b(?!\s*[\{\}\]\)\|\^\-\*\.~+=!<>%&])'
      beginCaptures:
        '0': { name: 'keyword.operator.new.ks' }
      end: '(?<=$|[\)\]\},])'
      patterns:
      - include: '#expression'
  # }}}
  delete-statement: # {{{
    begin: '^\s*(delete)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.delete.ks' }
    end: '$'
    patterns:
    - include: '#expression'
  # }}}
  disclose-statement: # {{{
    begin: '^\s*(disclose)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.dependency.disclose.ks' }
    end: '(?<=\})'
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.disclose.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.disclose.end.bracket.curly.ks' }
      patterns:
      - include: '#class-member'
    - name: 'entity.name.type.ks'
      match: '\b{{identifier}}\b'
  # }}}
  do-statement: # {{{
    begin: '^\s*(do)\s*(?=\{)'
    beginCaptures:
        '1': { name: 'keyword.control.loop.do.ks' }
    end: '$'
    patterns:
    - include: '#block'
  # }}}
  else-statement: # {{{
    begin: '^\s*(else\b)\s*(?=\{|\/\*|\/\/|$)'
    beginCaptures:
      '1': { name: 'keyword.control.conditional.else.ks' }
    end: '(?<=\})'
    patterns:
    - include: '#block'
    - include: '#comment'
  # }}}
  else-if-statement: # {{{
    begin: '(?=^\s*else\s+if\s+{{expression-beginning}})'
    end: '(?<=\})'
    patterns:
    - match: '^\s*(else)\b'
      captures:
        '1': { name: 'keyword.control.conditional.else.ks' }
    - begin: '(?=\bif\b)'
      end: '(?<=\})'
      patterns:
      - include: '#if-statement-body'
    - include: '#block'
  # }}}
  enum-accessor: # {{{
    match: '({{identifier}})(::)({{identifier}})'
    captures:
      '1': { name: 'variable.other.enum.ks' }
      '2': { name: 'punctuation.accessor.enum.ks' }
      '3': { name: 'variable.other.property.enum.ks' }
  # }}}
  enum-member: #{{{
    patterns:
    - begin: '\b(internal|private|public)\s+(\{)'
      beginCaptures:
        '1': { name: 'storage.modifier.access.ks' }
        '2': { name: 'punctuation.definition.members.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.members.end.bracket.curly.ks' }
      patterns:
      - include: '#class-member'
    - begin: '(?:\b(internal|private|public)\b)?\s*(?:(\bstatic))\s+(\{)'
      beginCaptures:
        '1': { name: 'storage.modifier.access.ks' }
        '2': { name: 'storage.modifier.access.ks' }
        '3': { name: 'punctuation.definition.members.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.members.end.bracket.curly.ks' }
      patterns:
      - include: '#class-member'
    - begin: '(?:\b(internal|private|public)\b\s*)?(?:(\bstatic\b)\s*)?(?:(\basync)\s*)?({{identifier}})(?=\()'
      beginCaptures:
        '1': { name: 'storage.modifier.access.ks' }
        '2': { name: 'storage.modifier.access.ks' }
        '3': { name: 'storage.modifier.async.ks' }
        '4': { name: 'entity.name.function.ks' }
      end: '(?<=\})|$|(?=\})'
      patterns:
      - include: '#function-parameters'
      - include: '#function-return-type'
      - include: '#function-throwables'
      - include: '#block'
      - begin: '=>'
        beginCaptures:
          '0': { name: 'storage.type.function.arrow.ks' }
        end: '(?=\}|$)'
        patterns:
        - include: '#expression'
    - begin: '(?:\b(internal|private|public)\b\s*)?(?:\b(static)\b\s*)?({{identifier}})'
      beginCaptures:
        '1': { name: 'storage.modifier.access.ks' }
        '2': { name: 'storage.modifier.access.ks' }
        '3': { name: 'entity.name.variable.field.ks' }
      end: '$'
      patterns:
      - begin: '='
        beginCaptures:
          '0': { name: 'keyword.operator.assignment.ks' }
        end: '$'
        patterns:
        - include: '#expression'
    - include: '#comment'
  # }}}
  enum-statement: # {{{
    begin: '(?=(?:\bflagged\s+)?\benum\s+{{identifier}}\b)'
    end: '(?<=\}|$)'
    patterns:
    - include: '#enum-statement-body'
  # }}}
  enum-statement-body: # {{{
    begin: '(?:(\bflagged)\s+)?(\benum)\s+({{identifier}})'
    beginCaptures:
      '1': { name: 'storage.modifier.ks' }
      '2': { name: 'storage.type.enum.ks' }
      '3': { name: 'entity.name.type.enum.ks' }
    end: '(?<=\})'
    patterns:
    - begin: '(\<)'
      beginCaptures:
        '1': { name: 'punctuation.definition.typeparameters.begin.ks' }
      end: '(\>)'
      endCaptures:
        '1': { name: 'punctuation.definition.typeparameters.end.ks' }
      patterns:
      - include: '#type'
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.enum.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.enum.end.bracket.curly.ks' }
      patterns:
      - include: '#enum-member'
  # }}}
  export-declarator: # {{{
    patterns:
    - include: '#class-statement'
    - include: '#const-statement'
    - include: '#enum-statement-body'
    - include: '#function-statement'
    - include: '#let-statement'
    - include: '#macro-statement'
    - include: '#namespace-statement'
    - include: '#struct-statement-body'
    - include: '#tuple-statement-body'
    - include: '#type-statement'
    - begin: '(?=[_$[:alpha:]])'
      end: '(?=,|$)'
      patterns:
      - match: '({{identifier}})\s*(\.)'
        captures:
          '1': { name: 'variable.other.object.ks' }
          '2': { name: 'punctuation.accessor.object.ks' }
      - match: '(?<=[_$[:alnum:]\)\]]\.)({{identifier}})'
        captures:
          '1': { name: 'variable.other.property.object.ks' }
      - match: '(?<=\.)(\*)'
        captures:
          '1': { name: 'constant.language.export-all.ks' }
      - begin: '\bfor\b'
        beginCaptures:
          '0': { name: 'keyword.control.export.for.ks' }
        end: '$'
        patterns:
        - begin: '\{'
          beginCaptures:
            '0': { name: 'punctuation.definition.export-for.begin.bracket.curly.ks' }
          end: '\}'
          endCaptures:
            '0': { name: 'punctuation.definition.export-for.end.bracket.curly.ks' }
          patterns:
          - match: '(=>)\s*({{identifier}})'
            captures:
              '1': { name: 'keyword.control.export.arrow.ks' }
              '2': { name: 'variable.other.ks' }
          - name: 'variable.other.ks'
            match: '{{identifier}}'
          - include: '#comma'
        - match: '(=>)\s*({{identifier}})'
          captures:
            '1': { name: 'keyword.control.export.arrow.ks' }
            '2': { name: 'variable.other.ks' }
        - name: 'variable.other.ks'
          match: '{{identifier}}'
        - name: 'constant.language.export-all.ks'
          match: '\*'
        - include: '#comma'
      - match: '(=>)\s*({{identifier}})'
        captures:
          '1': { name: 'keyword.control.export.arrow.ks' }
          '2': { name: 'variable.other.ks' }
      - name: 'variable.other.ks'
        match: '{{identifier}}'
      - include: '#comment'
    - begin: '\*'
      beginCaptures:
        '0': { name: 'constant.language.export-all.ks' }
      end: '$'
      patterns:
      - begin: '\bbut\b'
        beginCaptures:
          '0': { name: 'keyword.control.export.exclusion.ks' }
        end: '$'
        patterns:
        - begin: '\{'
          beginCaptures:
            '0': { name: 'punctuation.definition.export-exclusion.begin.bracket.curly.ks' }
          end: '\}'
          endCaptures:
            '0': { name: 'punctuation.definition.export-exclusion.end.bracket.curly.ks' }
          patterns:
          - name: 'variable.other.ks'
            match: '{{identifier}}'
        - name: 'variable.other.ks'
          match: '{{identifier}}'
        - include: '#comma'
    - include: '#comma'
    - include: '#attribute'
    - include: '#comment'
  # }}}
  export-statement: # {{{
    begin: '^\s*(export)\s+(?={{expression-beginning}}|\*)'
    beginCaptures:
      '1': { name: 'keyword.control.export.ks' }
    end: '(?<=\}|$)'
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.export.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.export.end.bracket.curly.ks' }
      patterns:
      - include: '#export-declarator'
    - include: '#export-declarator'
  # }}}
  expression: # {{{
    patterns:
    - include: '#array'
    - include: '#comment'
    - include: '#constant'
    - include: '#number'
    - include: '#object'
    - include: '#regex'
    - include: '#string'
    - include: '#template'
    #
    - include: '#create-expression'
    - include: '#function-expression'
    - include: '#function-call-name'
    - include: '#function-call-arguments'
    - include: '#array-accessor'
    - include: '#enum-accessor'
    - include: '#object-accessor'
    - include: '#tagged-template'
    - include: '#this-expression'
    - include: '#switch-expression'
    #
    - include: '#macro-expression'
    - include: '#macro-variable'
    #
    - include: '#operator'
    - include: '#binary-operator'
    - include: '#variable'
    - name: 'variable.anonymous.ks'
      match: '\b\_\b'
    - name: 'variable.other.ks'
      match: '({{identifier}})'
    - begin: '\('
      beginCaptures:
        '0': { name: 'meta.brace.round.ks' }
      end: '\)'
      endCaptures:
        '0': { name: 'meta.brace.round.ks' }
      patterns:
      - include: '#expression'
    - include: '#comma'
  # }}}
  expression-statement: # {{{
    patterns:
    - include: '#for-expression'
    - include: '#if-else-expression'
    - include: '#unless-expression'
    - include: '#expression'
  # }}}
  expression-without-function: # {{{
    patterns:
    - include: '#array'
    - include: '#comment'
    - include: '#constant'
    - include: '#number'
    - include: '#object'
    - include: '#regex'
    - include: '#string'
    - include: '#template'
    #
    - include: '#create-expression'
    - include: '#function-call-name'
    - include: '#function-call-arguments'
    - include: '#array-accessor'
    - include: '#enum-accessor'
    - include: '#object-accessor'
    - include: '#this-expression'
    - include: '#tagged-template'
    #
    - include: '#variable'
    - include: '#operator'
    - include: '#binary-operator'
    - name: 'variable.anonymous.ks'
      match: '\b\_\b'
    - name: 'variable.other.ks'
      match: '({{identifier}})'
    - begin: '\('
      beginCaptures:
        '0': { name: 'meta.brace.round.ks' }
      end: '\)'
      endCaptures:
        '0': { name: 'meta.brace.round.ks' }
      patterns:
      - include: '#expression-without-function'
    - include: '#comma'
  # }}}
  extern-declarator: # {{{
    patterns:
    - begin: '\b(?:(sealed)\s+|(systemic)\s+)?(class)\b'
      beginCaptures:
        '1': { name: 'storage.modifier.sealed.ks' }
        '2': { name: 'storage.modifier.system.ks' }
        '3': { name: 'storage.type.class.ks' }
      end: '(?=[,=\}]|$)'
      patterns:
      - name: 'storage.modifier.extends.ks'
        match: '\bextends\b'
      - name: 'entity.name.type.class.ks'
        match: '{{identifier}}'
      - begin: '\{'
        beginCaptures:
          '0': { name: 'punctuation.definition.class.begin.bracket.curly.ks' }
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.class.end.bracket.curly.ks' }
        patterns:
        - include: '#class-member'
    - begin: '\b(?:(async)\s+)?(func)\b'
      beginCaptures:
        '1': { name: 'storage.modifier.async.ks' }
        '2': { name: 'storage.type.function.ks' }
      end: '(?=[,=]|$)'
      patterns:
      - name: 'entity.name.function.ks'
        match: '{{identifier}}'
      - include: '#function-parameters'
      - include: '#function-return-type'
      - include: '#function-throwables'
    - begin: '\b(?:(sealed)\s+|(systemic)\s+)?(namespace)\b'
      beginCaptures:
        '1': { name: 'storage.modifier.sealed.ks' }
        '2': { name: 'storage.modifier.system.ks' }
        '3': { name: 'storage.type.namespace.ks' }
      end: '(?=[,=\}]|$)'
      patterns:
      - name: 'entity.name.type.namespace.ks'
        match: '{{identifier}}'
      - begin: '\{'
        beginCaptures:
          '0': { name: 'punctuation.definition.namespace.begin.bracket.curly.ks' }
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.namespace.end.bracket.curly.ks' }
        patterns:
        - begin: '(const)\s+({{identifier}})'
          beginCaptures:
            '1': { name: 'storage.type.constant.ks' }
            '2': { name: 'variable.other.constant.ks' }
          end: '(?=\,|$)'
          patterns:
          - name: 'meta.type.annotation.ks'
            begin: '(\:)'
            beginCaptures:
              '1': { name: 'keyword.operator.type.annotation.ks' }
            end: '(?=\s*,|$)'
            patterns:
            - include: '#type'
        - include: '#extern-declarator'
    - begin: '(?:(\basync)\s+)?({{identifier}})\s*(?=\()'
      beginCaptures:
        '1': { name: 'storage.modifier.async.ks' }
        '2': { name: 'entity.name.function.ks' }
      end: '(?=[,=]|$)'
      patterns:
      - include: '#function-parameters'
      - include: '#function-return-type'
      - include: '#function-throwables'
    - begin: '\b(?:(sealed)\s+|(systemic)\s+)?({{identifier}})\b'
      beginCaptures:
        '1': { name: 'storage.modifier.sealed.ks' }
        '2': { name: 'storage.modifier.system.ks' }
        '3': { name: 'variable.other.constant.ks' }
      end: '(?=[,=]|$)'
      patterns:
      - name: 'meta.type.annotation.ks'
        begin: '(\:)'
        beginCaptures:
          '1': { name: 'keyword.operator.type.annotation.ks' }
        end: '(?=\s*,|$)'
        patterns:
        - include: '#type'
    - include: '#attribute'
    - include: '#comment'
  # }}}
  extern-import-statement: # {{{
    begin: '^\s*(extern\|import)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.dependency.extern-import.ks' }
    end: '(?<=\}|$)'
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.extern-import.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.extern-import.end.bracket.curly.ks' }
      patterns:
      - include: '#import-declarator'
      - include: '#attribute'
      - include: '#comment'
    - include: '#import-declarator'
  # }}}
  extern-require-statement: # {{{
    begin: '^\s*(extern\|require)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.extern-require.ks' }
    end: '(?<=\}|$)'
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.extern-require.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.extern-require.end.bracket.curly.ks' }
      patterns:
      - include: '#extern-declarator'
    - include: '#extern-declarator'
    - include: '#comma'
  # }}}
  extern-statement: # {{{
    begin: '^\s*(extern)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.dependency.extern.ks' }
    end: '(?<=\}|$)'
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.extern.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.extern.end.bracket.curly.ks' }
      patterns:
      - include: '#extern-declarator'
    - include: '#extern-declarator'
    - include: '#comma'
  # }}}
  fallthrough-statement: # {{{
    begin: '^\s*(fallthrough\b)'
    beginCaptures:
      '1': { name: 'keyword.control.switch.fallthrough.ks' }
    end: '$'
  # }}}
  function-call-name: # {{{
    match: '(@)?({{identifier}})(?=(?:\?)?(?:\*[$*]|\^[$^@]|!)?\()'
    captures:
      '1': { name: 'storage.modifier.instance.ks' }
      '2':
        name: 'entity.name.function.ks'
        patterns:
        - include: '#variable'
  # }}}
  function-call-arguments: # {{{
    begin: '(?<=[_$[:alnum:]\)\]])(\?)?(?:(\*[$*]|\^[$^@])|(!))?(\()'
    beginCaptures:
      '1': { name: 'keyword.operator.nullable.ks' }
      '2': { name: 'keyword.operator.function.scope.ks' }
      '3': { name: 'keyword.operator.function.macro.ks' }
      '4': { name: 'punctuation.definition.arguments.begin.bracket.round.ks' }
    end: '\)'
    endCaptures:
      '0': { name: 'punctuation.definition.arguments.end.bracket.round.ks' }
    patterns:
    - begin: '({{identifier}})\s*(:)\s+'
      beginCaptures:
        '1': { name: 'meta.argument.key.ks' }
        '2': { name: 'punctuation.separator.key-value.ks' }
      end: '(?=$|[,\)])'
      patterns:
      - include: '#expression'
    - include: '#expression'
  # }}}
  function-expression: # {{{
    patterns:
      - begin: '(?={{function-block}})'
        end: '(?<=\}|$)'
        patterns:
        - name: 'storage.modifier.async.ks'
          match: '\basync\b'
        - name: 'storage.type.function.ks'
          match: '\bfunc\b'
        - include: '#function-parameters'
        - match: '({{identifier}})(?=\s*=>)'
          captures:
            '1': { name: 'variable.parameter.ks' }
        - include: '#function-return-type'
        - include: '#function-throwables'
        - include: '#block'
        - begin: '(=>)(?=\s*{)'
          beginCaptures:
            '1': { name: 'storage.type.function.arrow.ks' }
          end: '(?<=\}|$)'
          patterns:
          - include: '#block'
      - begin: '(?={{function-line}})'
        end: '(?=$|[,\)\]])'
        patterns:
        - name: 'storage.modifier.async.ks'
          match: '\basync\b'
        - name: 'storage.type.function.ks'
          match: '\bfunc\b'
        - include: '#function-parameters'
        - match: '({{identifier}})(?=\s*=>)'
          captures:
            '1': { name: 'variable.parameter.ks' }
        - include: '#function-return-type'
        - include: '#function-throwables'
        - begin: '=>'
          beginCaptures:
            '0': { name: 'storage.type.function.arrow.ks' }
          end: '(?=$|[,\)\]])'
          patterns:
          - include: '#function-return-expression'
  # }}}
  function-parameters: # {{{
    begin: '\('
    beginCaptures:
      '0': { name: 'punctuation.definition.parameters.begin.bracket.round.ks' }
    end: '\)'
    endCaptures:
      '0': { name: 'punctuation.definition.parameters.end.bracket.round.ks' }
    patterns:
    - match: '(\.\.\.)(?:(\{)(\d*)(,?)(\d*)(\}))?'
      captures:
        '1': { name: 'keyword.operator.rest.ks' }
        '2': { name: 'punctuation.definition.rest.begin.bracket.curly' }
        '3': { name: 'constant.numeric.decimal.ks' }
        '4': { name: 'punctuation.separator.comma.ks' }
        '5': { name: 'constant.numeric.decimal.ks' }
        '6': { name: 'punctuation.definition.rest.end.bracket.curly' }
    - begin: '(@)?({{identifier}})'
      beginCaptures:
        '1': { name: 'storage.modifier.at.ks' }
        '2': { name: 'variable.parameter.ks' }
      end: (?=[\:\=\,\)\/])
      patterns:
      - name: 'storage.modifier.nullable.ks'
        match: '\?'
      - name: 'storage.modifier.required.ks'
        match: '!'
    - name: 'meta.type.annotation.ks'
      begin: '\:'
      beginCaptures:
        '0': { name: 'keyword.operator.type.annotation.ks' }
      end: '(?=\s*[\=,\)\/])'
      patterns:
      - include: '#type'
    - begin: '\='
      beginCaptures:
        '0': { name: 'keyword.operator.assignment.ks' }
      end: (?=[,\)\/])
      patterns:
      - include: '#expression'
    - name: 'storage.modifier.required.ks'
      match: '!'
    - include: '#function-parameter-binding-array'
    - include: '#function-parameter-binding-object'
    - include: '#comment'
    - include: '#comma'
  # }}}
  function-parameter-binding-array: # {{{
    begin: '\['
    beginCaptures:
      '0': { name: 'punctuation.definition.binding-pattern.array.begin.bracket.square.ks' }
    end: '\]'
    endCaptures:
      '0': { name: 'punctuation.definition.binding-pattern.array.end.bracket.square.ks' }
    patterns:
    - match: '(\@)?(\b{{identifier}}\b)'
      captures:
        '1': { name: 'storage.modifier.at.ks' }
        '2': { name: 'variable.parameter.ks' }
    - name: 'meta.type.annotation.ks'
      begin: '\:'
      beginCaptures:
        '0': { name: 'keyword.operator.type.annotation.ks' }
      end: '(?=\s*[\=,\)\/\]])'
      patterns:
      - include: '#type'
    - begin: '='
      beginCaptures:
        '0': { name: 'keyword.operator.assignment.ks' }
      end: '(?=[\],])'
      patterns:
      - include: '#expression'
    - name: 'keyword.operator.rest.ks'
      match: '\.\.\.'
    - include: '#function-parameter-binding-array'
    - include: '#function-parameter-binding-object'
    - include: '#comma'
  # }}}
  function-parameter-binding-object: # {{{
    begin: '\{'
    beginCaptures:
      '0': { name: 'punctuation.definition.binding-pattern.object.begin.bracket.curly.ks' }
    end: '\}'
    endCaptures:
      '0': { name: 'punctuation.definition.binding-pattern.object.end.bracket.curly.ks' }
    patterns:
    - include: '#function-parameter-binding-object-elements'
  # }}}
  function-parameter-binding-object-elements: # {{{
    patterns:
    - match: '(\.\.\.)?(\@)?(\b{{identifier}}\b)\s*(?!:)'
      captures:
        '1': { name: 'keyword.operator.rest.ks' }
        '2': { name: 'storage.modifier.at.ks' }
        '3': { name: 'variable.parameter.ks' }
    - begin: '\b({{identifier}})\s*(\:)'
      beginCaptures:
        '1': { name: 'meta.object.key.ks' }
        '2': { name: 'punctuation.separator.key-value.ks' }
      end: '(?=[\},$])'
      patterns:
      - match: '(\@)?(\b{{identifier}}\b)'
        captures:
          '1': { name: 'storage.modifier.at.ks' }
          '2': { name: 'variable.parameter.ks' }
      - begin: '='
        beginCaptures:
          '0': { name: 'keyword.operator.assignment.ks' }
        end: '(?=[\},])'
        patterns:
        - include: '#expression'
      - include: '#function-parameter-binding-array'
      - include: '#function-parameter-binding-object'
    - begin: '='
      beginCaptures:
        '0': { name: 'keyword.operator.assignment.ks' }
      end: '(?=[\},])'
      patterns:
      - include: '#expression'
    - include: '#comma'
  # }}}
  function-return-expression: # {{{
    patterns:
    - include: '#for-expression'
    - include: '#if-else-expression'
    - include: '#unless-expression'
    - include: '#expression'
  # }}}
  function-return-type: # {{{
    patterns:
    - name: 'meta.function.return-type.ks'
      begin: '(\:)\s+(\{)'
      beginCaptures:
        '1': { name: 'keyword.operator.type.annotation.ks' }
        '2': { name: 'punctuation.definition.object.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.object.end.bracket.curly.ks' }
      patterns:
      - include: '#type-object'
    - name: 'meta.function.return-type.ks'
      begin: '(\:)(?!\=)'
      beginCaptures:
        '1': { name: 'keyword.operator.type.annotation.ks' }
      end: '(?=\s*[\{~=]|$)'
      patterns:
      - name: 'variable.language.auto.ks'
        match: '\bauto\b'
      - include: '#type'
  # }}}
  function-statement: # {{{
    begin: '\b(?:(async)\s+)?(func){{match-identifier}}'
    beginCaptures:
      '1': { name: 'storage.modifier.async.ks' }
      '2': { name: 'storage.type.function.ks' }
    end: '(?<=\}|$)'
    patterns:
    - begin: '{{identifier}}'
      beginCaptures:
        '0': { name: 'entity.name.function.ks' }
      end: '(?=\{|=>)'
      patterns:
      - include: '#function-parameters'
      - include: '#function-return-type'
      - include: '#function-throwables'
      - include: '#comment'
    - include: '#block'
    - begin: '=>'
      beginCaptures:
        '0': { name: 'storage.type.function.arrow.ks' }
      end: '$'
      patterns:
      - include: '#function-return-expression'
  # }}}
  function-throwables: # {{{
    name: 'meta.throwables.ks'
    begin: '(\~)'
    beginCaptures:
      '1': { name: 'storage.modifier.throwables.ks' }
    end: '(?=$|\s*[\{=])'
    patterns:
    - include: '#type'
    - include: '#comma'
  # }}}
  for-expression: # {{{
    begin: '\b(for)(?=\s+(?:{{expression-beginning}}|:))'
    beginCaptures:
      '1': { name: 'keyword.control.loop.for.ks' }
    end: '(?<=\})'
    patterns:
      - begin: '\bconst\b'
        beginCaptures:
          '0': { name: 'storage.type.constant.ks' }
        end: '(?=\bfrom\b|\bin\b|\bof\b)'
        patterns:
        - include: '#const-statement-variable'
      - begin: '\blet\b'
        beginCaptures:
          '0': { name: 'storage.type.readwrite.ks' }
        end: '(?=\bfrom\b|\bin\b|\bof\b)'
        patterns:
        - include: '#let-statement-variable'
      - begin: '(?<=for)\s+(?=\[)'
        end: '(?=\bin\b|\bof\b)'
        patterns:
        - include: '#binding-array'
        - include: '#expression'
      - begin: '(?<=for)\s+(\{)'
        beginCaptures:
          '1': { name: 'punctuation.definition.binding-pattern.object.begin.bracket.curly.ks' }
        end: '(?=\bin\b|\bof\b)'
        patterns:
        - include: '#binding-object-elements'
        - name: 'punctuation.definition.binding-pattern.object.end.bracket.curly.ks'
          match: '\}'
        - include: '#expression'
      - name: 'keyword.operator.loop.from.ks'
        match: '\bfrom\b(?![\[\]\(\)\.])'
      - name: 'keyword.operator.loop.til.ks'
        match: '\btil\b(?![\[\]\(\)\.])'
      - name: 'keyword.operator.loop.to.ks'
        match: '\bto\b(?![\[\]\(\)\.])'
      - name: 'keyword.operator.loop.by.ks'
        match: '\bby\b(?![\[\]\(\)\.])'
      - name: 'keyword.operator.loop.in.ks'
        match: '\bin\b(?![\[\]\(\)\.])'
      - name: 'keyword.operator.loop.desc.ks'
        match: '\bdesc\b(?![\[\]\(\)\.])'
      - name: 'keyword.operator.loop.of.ks'
        match: '\bof\b(?![\[\]\(\)\.])'
      - name: 'keyword.operator.loop.while.ks'
        match: '\bwhile\b(?![\[\]\(\)\.])'
      - name: 'keyword.operator.loop.until.ks'
        match: '\buntil\b(?![\[\]\(\)\.])'
      - name: 'keyword.operator.conditional.when.ks'
        match: '\bwhen\b(?![\[\]\(\)\.])'
      - include: '#block'
      - name: 'keyword.operator.range.ks'
        match: '(?<!\.)\<?\.\.\<?(?!\.)'
      - include: '#expression'
      - name: 'meta.type.annotation.ks'
        begin: '(\:)'
        beginCaptures:
          '1': { name: 'keyword.operator.type.annotation.ks' }
        end: '$|(?=\s*(?:,|in|of))'
        patterns:
        - include: '#type'
  # }}}
  for-statement: # {{{
    begin: '^\s*(?=for\s+[:_$[:alpha:]\{\[])'
    end: '(?<=\})'
    patterns:
    - include: '#for-expression'
    - include: '#block'
  # }}}
  if-else-expression: # {{{
    begin: '\b(if)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.conditional.if.ks' }
    end: '$'
    patterns:
    - begin: '\b(else)\s+(?={{expression-beginning}})'
      beginCaptures:
        '1': { name: 'keyword.control.conditional.else.ks' }
      end: '$'
      patterns:
      - include: '#expression'
    - include: '#expression'
  # }}}
  if-expression: # {{{
    begin: '\b(if)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.conditional.if.ks' }
    end: '$'
    patterns:
    - include: '#expression'
  # }}}
  if-statement: # {{{
    begin: '(?<=^|\*\/)(?=\s*if\s+(?:{{expression-beginning}}|$))'
    end: '(?<=\})'
    patterns:
    - include: '#if-statement-body'
  # }}}
  if-statement-body: # {{{
    patterns:
    - begin: '\b(if)\s+(const)\s*(\{)'
      beginCaptures:
        '1': { name: 'keyword.control.conditional.if.ks' }
        '2': { name: 'storage.type.constant.ks' }
        '3': { name: 'punctuation.definition.binding-pattern.object.begin.bracket.square.ks' }
      end: '(?=\{)'
      patterns:
      - begin: '(?<=\{)'
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.binding-pattern.object.end.bracket.square.ks' }
        patterns:
          - include: '#const-statement-variable'
      - begin: '(\=)'
        beginCaptures:
          '1': { name: 'keyword.operator.assignment.ks' }
        end: '(?=\{)'
        patterns:
        - include: '#expression'
    - begin: '\b(if)\s+(const)(?=\s+[_$[:alpha:]\[])'
      beginCaptures:
        '1': { name: 'keyword.control.conditional.if.ks' }
        '2': { name: 'storage.type.constant.ks' }
      end: '(?=\{)'
      patterns:
      - include: '#const-statement-variable'
      - begin: '(\=)'
        beginCaptures:
          '1': { name: 'keyword.operator.assignment.ks' }
        end: '(?=\{)'
        patterns:
        - include: '#expression'
    - begin: '\b(if)\s+(let|auto)\s*(\{)'
      beginCaptures:
        '1': { name: 'keyword.control.conditional.if.ks' }
        '2': { name: 'storage.type.readwrite.ks' }
        '3': { name: 'punctuation.definition.binding-pattern.object.begin.bracket.curly.ks' }
      end: '(?=\{)'
      patterns:
      - begin: '(?<=\{)'
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.binding-pattern.object.end.bracket.curly.ks' }
        patterns:
          - include: '#let-statement-variable'
      - begin: '(=)'
        beginCaptures:
          '1': { name: 'keyword.operator.assignment.ks' }
        end: '(?=\{)'
        patterns:
        - include: '#expression'
    - begin: '\b(if)\s+(let|auto)(?=\s+[_$[:alpha:]\[])'
      beginCaptures:
        '1': { name: 'keyword.control.conditional.if.ks' }
        '2': { name: 'storage.type.readwrite.ks' }
      end: '(?=\{)'
      patterns:
      - include: '#let-statement-variable'
      - begin: '(=)'
        beginCaptures:
          '1': { name: 'keyword.operator.assignment.ks' }
        end: '(?=\{)'
        patterns:
        - include: '#expression'
    - begin: '\b(if)\s+(?=\[)'
      beginCaptures:
        '1': { name: 'keyword.control.conditional.if.ks' }
      end: '(?=\{)'
      patterns:
      - include: '#binding-array'
      - include: '#expression'
    - begin: '\b(if)(?=\s+\{)'
      beginCaptures:
        '1': { name: 'keyword.control.conditional.if.ks' }
      end: '(?=\{)'
      patterns:
      - begin: '(?<=if)\s+(\{)'
        beginCaptures:
          '1': { name: 'punctuation.definition.binding-pattern.object.begin.bracket.curly.ks' }
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.binding-pattern.object.end.bracket.curly.ks' }
        patterns:
        - include: '#binding-object-elements'
      - include: '#expression'
    - begin: '\bif\b'
      beginCaptures:
        '0': { name: 'keyword.control.conditional.if.ks' }
      end: '(?=\{)'
      patterns:
      - include: '#expression'
    - include: '#block'
  # }}}
  implement-statement: # {{{
    begin: '^\s*(impl)\s+({{identifier}})'
    beginCaptures:
      '1': { name: 'keyword.control.implement.ks' }
      '2': { name: 'entity.name.type.ks' }
    end: '(?<=\})'
    patterns:
    - begin: '<'
      beginCaptures:
        '0': { name: 'punctuation.definition.typeparameters.begin.ks' }
      end: '>'
      endCaptures:
        '0': { name: 'punctuation.definition.typeparameters.end.ks' }
      patterns:
      - include: '#type'
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.implement.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.implement.end.bracket.curly.ks' }
      patterns:
      - name: 'storage.modifier.access.ks'
        match: 'private|protected|public|static'
      - name: 'storage.modifier.ks'
        match: 'override|overwrite'
      - begin: '\{'
        beginCaptures:
          '0': { name: 'punctuation.definition.members.begin.bracket.curly.ks' }
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.members.end.bracket.curly.ks' }
        patterns:
        - include: '#class-member'
      - include: '#class-member'
      - include: '#comment'
  # }}}
  import-alias: # {{{
    begin: '=>'
    beginCaptures:
      '0': { name: 'keyword.control.dependency.arrow.ks' }
    end: '(?=[,\}]|$)'
    patterns:
    - name: 'variable.other.constant.ks'
      match: '{{identifier}}'
  # }}}
  import-declarator: # {{{
    begin: (?=['"])
    end: (?<=$|\})
    patterns:
    - include: '#string'
    - begin: '\('
      beginCaptures:
        '0': { name: 'punctuation.definition.parameters.begin.bracket.round.ks' }
      end: '\)'
      endCaptures:
        '0': { name: 'punctuation.definition.parameters.end.bracket.round.ks' }
      patterns:
      - match: '(\brequire)\s+({{identifier}})'
        captures:
          '1': { name: 'storage.modifier.require.ks' }
          '2': { name: 'variable.other.ks' }
      - match: '({{identifier}})\s*(:)\s*'
        captures:
          '1': { name: 'variable.other.ks' }
          '2': { name: 'punctuation.separator.alias.ks' }
      - include: '#expression'
    - include: '#import-specifier'
    - begin: '\bfor\b'
      beginCaptures:
        '0': { name: 'keyword.control.dependency.for.ks' }
      end: '$'
      patterns:
      - include: '#extern-declarator'
      - include: '#import-alias'
      - include: '#comma'
    - begin: '\bbut\b'
      beginCaptures:
        '0': { name: 'keyword.control.dependency.exclusion.ks' }
      end: '$'
      patterns:
      - begin: '\{'
        beginCaptures:
          '0': { name: 'punctuation.definition.dependency-exclusion.begin.bracket.curly.ks' }
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.dependency-exclusion.end.bracket.curly.ks' }
        patterns:
        - name: 'variable.other.ks'
          match: '{{identifier}}'
      - name: 'variable.other.ks'
        match: '{{identifier}}'
      - include: '#comma'
    - begin: '=>'
      beginCaptures:
        '0': { name: 'keyword.control.dependency.arrow.ks' }
      end: '(?<=\}|$)'
      patterns:
      - name: 'variable.other.constant.ks'
        match: '{{identifier}}'
      - include: '#import-specifier'
  # }}}
  import-specifier: # {{{
    begin: '\{'
    beginCaptures:
      '0': { name: 'punctuation.definition.import-specification.begin.bracket.curly.ks' }
    end: '\}'
    endCaptures:
      '0': { name: 'punctuation.definition.import-specification.end.bracket.curly.ks' }
    patterns:
    - match: '(\*)\s*(=>)\s*({{identifier}})'
      captures:
        '1': { name: 'constant.language.import-all.ks' }
        '2': { name: 'keyword.control.dependency.arrow.ks' }
        '3': { name: 'variable.other.constant.ks' }
    - include: '#extern-declarator'
    - include: '#import-alias'
    - include: '#attribute'
    - include: '#comment'
  # }}}
  import-statement: # {{{
    begin: '^\s*(import)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.import.ks' }
    end: '(?<=\}|$)'
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.import.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.import.end.bracket.curly.ks' }
      patterns:
      - include: '#import-declarator'
      - include: '#attribute'
      - include: '#comment'
    - include: '#import-declarator'
  # }}}
  include-statement: # {{{
    begin: '^\s*(include(?:\s(again))?)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.include.ks' }
    end: '(?<=\}|$)'
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.include.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.include.end.bracket.curly.ks' }
      patterns:
      - begin: (?=['"])
        end: (?<=['"])
        patterns:
        - include: '#string'
      - include: '#attribute'
      - include: '#comment'
    - begin: (?=['"])
      end: (?<=['"])
      patterns:
      - include: '#string'
  # }}}
  lateinit-statement: # {{{
    patterns:
    - begin: '\b(lateinit)\s+(let|auto)\s+(?={{expression-beginning}})'
      beginCaptures:
        '1': { name: 'storage.type.lateinit.ks' }
        '2': { name: 'storage.type.readwrite.ks' }
      end: '$'
      patterns:
      - include: '#let-statement-variable'
    - begin: '\b(lateinit)\s+(const)\s+(?={{expression-beginning}})'
      beginCaptures:
        '1': { name: 'storage.type.lateinit.ks' }
        '2': { name: 'storage.type.constant.ks' }
      end: '$'
      patterns:
      - name: 'meta.definition.variable.ks variable.other.constant.ks'
        match: '{{identifier}}'
      - include: '#let-statement-variable'
  # }}}
  let-statement: # {{{
    begin: '\b(let)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'storage.type.readwrite.ks' }
    end: '$'
    patterns:
    - begin: '(=)'
      beginCaptures:
        '1': { name: 'keyword.operator.assignment.ks' }
      end: '$'
      patterns:
      - include: '#if-else-expression'
      - include: '#unless-expression'
      - include: '#expression'
    - include: '#let-statement-variable'
  # }}}
  let-statement-variable: # {{{
    patterns:
    - include: '#binding-array'
    - include: '#binding-object'
    - name: 'variable.anonymous.ks'
      match: '\b\_\b'
    - name: 'meta.definition.variable.ks variable.other.readwrite.ks'
      match: '{{identifier}}'
    - name: 'meta.type.annotation.ks'
      begin: '(:)'
      beginCaptures:
        '1': { name: 'keyword.operator.type.annotation.ks' }
      end: '$|(?=\s*(?:=|,|in|of))'
      patterns:
      - include: '#type'
    - include: '#comma'
  # }}}
  macro-element: # {{{
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.bracket.curly.ks' }
      patterns:
      - include: '#macro-element'
    - begin: '\('
      beginCaptures:
        '0': { name: 'punctuation.bracket.round.ks' }
      end: '\)'
      endCaptures:
        '0': { name: 'punctuation.bracket.round.ks' }
      patterns:
      - include: '#macro-element'
    - include: '#macro-variable'
  # }}}
  macro-expression: # {{{
    patterns:
    - begin: '\b(macro)\s*(\{)'
      beginCaptures:
        '1': { name: 'keyword.control.macro.ks' }
        '2': { name: 'punctuation.definition.macro-expression.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.macro-expression.end.bracket.curly.ks' }
      patterns:
      - include: '#macro-element'
    - begin: '\b(macro)\s+(?![\|\^\-\*\.~+=!<>%&]|in|of|$)'
      beginCaptures:
        '1': { name: 'keyword.control.macro.ks' }
      end: '(?=$|\))'
      patterns:
      - include: '#macro-element'
  # }}}
  macro-statement: # {{{
    patterns:
    - name: 'meta.macro.ks'
      begin: '(\bmacro)\s+({{identifier}})\s*(?=\()'
      beginCaptures:
        '1': { name: 'storage.type.macro.ks' }
        '2': { name: 'entity.name.type.macro.ks' }
      end: '(?<=\}|$)'
      patterns:
      - include: '#function-parameters'
      - begin: '(=>)\s*'
        beginCaptures:
          '1': { name: 'storage.type.function.arrow.ks' }
        end: '$'
        patterns:
        - include: '#macro-element'
      - include: '#block'
    - include: '#macro-expression'
  # }}}
  macro-variable: # {{{
    patterns:
    - name: 'meta.macro.variable.ks'
      begin: '(#)([aejsw])?(\()'
      beginCaptures:
        '1': { name: 'punctuation.accessor.macro.ks' }
        '2': { name: 'storage.modifier.macro.ks' }
        '3': { name: 'punctuation.definition.macro-variable.begin.bracket.round.ks' }
      end: '\)'
      endCaptures:
        '0': { name: 'punctuation.definition.macro-variable.end.bracket.round.ks' }
      patterns:
      - include: '#expression'
    - name: 'meta.macro.variable.ks'
      match: '(#)({{identifier}})'
      captures:
        '1': { name: 'punctuation.accessor.macro.ks' }
        '2': { name: 'variable.other.ks' }
  # }}}
  method-return-type: # {{{
    name: 'meta.function.return-type.ks'
    begin: '(\:)(?!\=)'
    beginCaptures:
      '1': { name: 'keyword.operator.type.annotation.ks' }
    end: '(?=\s*[\{~=]|$)'
    patterns:
    - match: '(\@)({{identifier}}\b)'
      captures:
        '1': { name: 'storage.modifier.instance.ks' }
        '2': { name: 'variable.other.instance.ks' }
    - name: 'variable.language.auto.ks'
      match: '\bauto\b'
    - name: 'variable.language.this.ks'
      match: '\bthis\b'
    - include: '#type'
  # }}}
  namespace-statement: # {{{
    begin: '(\bnamespace){{match-identifier}}'
    beginCaptures:
      '1': { name: 'storage.type.namespace.ks' }
    end: '(?<=\})'
    patterns:
    - name: 'entity.name.type.namespace.ks'
      match: '{{identifier}}'
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.namespace.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.namespace.end.bracket.curly.ks' }
      patterns:
        - include: '#export-statement'
        - include: '#extern-statement'
        - include: '#import-statement'
        - include: '#include-statement'
        - include: '#statements'
  # }}}
  number: # {{{
    patterns:
    - name: 'constant.numeric.binary.ks'
      match: '\b0b[_01]+[a-zA-Z]*\b'
    - name: 'constant.numeric.octal.ks'
      match: '\b0o[0-7]+(?:\.[_0-7]+[pP][-+]?[_0-9]+)?[a-zA-Z]*\b'
    - name: 'constant.numeric.hex.ks'
      match: '\b0x[_0-9a-fA-F]+(?:\.[_0-9a-fA-F]+[pP][-+]?[_0-9]+)?[a-zA-Z]*\b'
    - name: 'constant.numeric.decimal.ks'
      match: '\b[0-9][_0-9]*(?:\.[_0-9]+)?(?:[eE][-+]?[_0-9]+)?[a-zA-Z]*\b'
    - name: 'constant.numeric.decimal.ks'
      match: '\b\.[0-9][_0-9]*(?:[eE][-+]?[_0-9]+|[a-zA-Z]*)\b'
    - name: 'constant.numeric.radix.ks'
      match: '\b(?:[0-9]|[1-2][0-9]|3[0-6])r[_0-9a-zA-Z]+(\.[_0-9a-zA-Z]+)?\b'
  # }}}
  object: # {{{
    begin: '\{'
    beginCaptures:
      '0': { name: 'punctuation.definition.object.begin.bracket.curly.ks' }
    end: '\}'
    endCaptures:
      '0': { name: 'punctuation.definition.object.end.bracket.curly.ks' }
    patterns:
    - include: '#comment'
    - include: '#attribute'
    - begin: '({{identifier}})\s*(\:)'
      beginCaptures:
        '1': { name: 'meta.object.key.ks' }
        '2': { name: 'punctuation.separator.key-value.ks' }
      end: '(?=$|\,|\})'
      patterns:
      - include: '#expression'
    - begin: (?=['"`\[])
      end: '(?=$|\,|\})'
      patterns:
      - include: '#comment'
      - name: 'meta.object-literal.key.ks'
        begin: (?=['"`\[])
        end: (?=[:\(\}])
        patterns:
        - include: '#expression'
      - begin: '\:'
        beginCaptures:
          '0': { name: 'punctuation.separator.key-value.ks' }
        end: '(?=$|\,|\})'
        patterns:
        - include: '#expression'
      - name: 'meta.definition.method.ks'
        begin: '(?=\()'
        end: '(?<=\}|$)'
        patterns:
        - include: '#function-parameters'
        - include: '#function-return-type'
        - include: '#function-throwables'
        - include: '#block'
        - begin: '=>'
          beginCaptures:
            '0': { name: 'storage.type.function.arrow.ks' }
          end: '(?=$|[,\)\]])'
          patterns:
          - include: '#expression'
    - name: 'meta.definition.method.ks'
      begin: '(?:(\basync)\s+)?({{identifier}})\s*(?=\()'
      beginCaptures:
        '1': { name: 'storage.modifier.async.ks' }
        '2': { name: 'entity.name.function.ks' }
      end: '(?<=\}|$)'
      patterns:
      - include: '#function-parameters'
      - include: '#function-return-type'
      - include: '#function-throwables'
      - include: '#block'
      - begin: '=>'
        beginCaptures:
          '0': { name: 'storage.type.function.arrow.ks' }
        end: '(?=$|[,\)\]])'
        patterns:
        - include: '#expression'
    - match: '(\@)(\b{{identifier}}\b)'
      captures:
        '1': { name: 'storage.modifier.instance.ks' }
        '2': { name: 'variable.other.instance.ks' }
    - name: 'variable.other.ks'
      match: '\b{{identifier}}\b'
    - name: 'keyword.operator.spread.ks'
      match: '\.\.\.'
    - include: '#comma'
  # }}}
  object-accessor: # {{{
    patterns:
      - match: '({{identifier}})\s*(?:(\?\.)|(\.))(?!\.)'
        captures:
          '1':
            patterns:
            - include: '#variable'
            - name: 'variable.other.object.ks'
              match: '{{identifier}}'
          '2': { name: 'punctuation.accessor.optional.ks' }
          '3': { name: 'punctuation.accessor.object.ks' }
      - match: '(?<=[_$[:alnum:]\)\]]\.)({{identifier}})'
        captures:
          '1': { name: 'variable.other.property.object.ks' }
  # }}}
  operator: # {{{
    patterns:
    - name: 'keyword.operator.assignment.compound.ks'
      match: '\+=|-=|\*=|(?<!\()/\.?=|%=|\?\?=|!\?=|\?='
    - name: 'keyword.operator.assignment.compound.bitwise.ks'
      match: '<<=|>>=|>>=|&&=|\^\^=|\|\|='
    - name: 'keyword.operator.bitwise.ks'
      match: '\^\^\^|~~~|&&&|\|\|\||<<<|>>>'
    - name: 'keyword.operator.comparison.ks'
      match: '<=|>=|==|<|>|!=|~~|!~'
    - name: 'keyword.operator.assignment.ks'
      match: '=|:='
    - name: 'keyword.operator.decrement.ks'
      match: '--'
    - name: 'keyword.operator.increment.ks'
      match: '\+\+'
    - name: 'keyword.operator.spread.ks'
      match: '\.\.\.'
    - name: 'keyword.operator.null-coalescing.ks'
      match: '\?\?'
    - name: 'keyword.operator.exception-coalescing.ks'
      match: '~'
    - name: 'keyword.control.flow.await.ks'
      match: '\bawait\b(?=\s*{{expression-beginning}})'
    - match: '\b(try)(?:(!)|\b)(?=\s*{{expression-beginning}})'
      captures:
        '1': { name: 'keyword.control.flow.try.ks' }
        '2': { name: 'keyword.operator.try.unwrap.ks' }
    - begin: '(?<=\s)\?(?=\s|$)'
      beginCaptures:
        '0': { name: 'keyword.operator.ternary.ks' }
      end: '(?=$|[\)\{\]\?,&\|])'
      patterns:
      - include: '#expression'
    - name: 'keyword.operator.ternary.ks'
      match: '(?<=\s):(?=\s|$)'
    - begin: '\b(is(?:\s+not)?)\b\s*'
      beginCaptures:
        '1': { name: 'keyword.operator.type-checking.ks' }
      end: '(?=$|[\)\{\]\?,&\|\s])'
      patterns:
      - include: '#type'
    - begin: '\b(as!)\s+'
      beginCaptures:
        '1': { name: 'keyword.operator.type-casting.manual.forced.long.ks' }
      end: '(?=$|[\)\{\]\?,&\|\.\s])'
      patterns:
      - include: '#type'
    - begin: '(?!<\s):!(?!\s)'
      beginCaptures:
        '0': { name: 'keyword.operator.type-casting.manual.forced.abbr.ks' }
      end: '(?=$|[\)\{\]\?,&\|\.\+\-\*\/\s])'
      patterns:
      - include: '#type'
    - begin: '\b(as\?)\s+'
      beginCaptures:
        '1': { name: 'keyword.operator.type-casting.manual.nullable.long.ks' }
      end: '(?=$|[\)\{\]\?,&\|\.\s])'
      patterns:
      - include: '#type'
    - begin: '(?!<\s):\?(?!\s)'
      beginCaptures:
        '0': { name: 'keyword.operator.type-casting.manual.nullable.abbr.ks' }
      end: '(?=$|[\)\{\]\?,&\|\.\+\-\*\/\s])'
      patterns:
      - include: '#type'
    - begin: '\b(as)\b\s+'
      beginCaptures:
        '1': { name: 'keyword.operator.type-casting.manual.default.long.ks' }
      end: '(?=$|[\)\{\]\?,&\|\.\s])'
      patterns:
      - include: '#type'
    - begin: '(?!<\s):(?!\s)'
      beginCaptures:
        '0': { name: 'keyword.operator.type-casting.manual.default.abbr.ks' }
      end: '(?=$|[\)\{\]\?,&\|\.\+\-\*\/\s])'
      patterns:
      - include: '#type'
    - name: 'keyword.operator.type-casting.auto.nullable.ks'
      match: '(?<=[_$[:alnum:]\]\)])!\?'
    - name: 'keyword.operator.type-casting.auto.forced.ks'
      match: '(?<=[_$[:alnum:]\]\)])!!'
    - name: 'keyword.operator.existential.ks'
      match: '\?'
  # }}}
  regex: # {{{
    name: 'string.regexp.ks'
    begin: '(?<=[\[=(?:+,!]|^|return|=>|&&|\|\|)\s*(/)(?![/*+?])(?=.*/)'
    beginCaptures:
      '1': {name: 'punctuation.definition.string.begin.ks' }
    end: '(/)[gimuy]*'
    endCaptures:
      '1': {name: 'punctuation.definition.string.end.ks' }
    patterns:
    - include: '#regexp'
  # }}}
  regexp: # {{{
    patterns:
    - name: keyword.control.anchor.regexp
      match: \\[bB]|\^|\$
    - match: \\[1-9]\d*|\\k<([a-zA-Z_$][\w$]*)>
      captures:
        '0': { name: keyword.other.back-reference.regexp }
        '1': { name: variable.other.regexp }
    - name: keyword.operator.quantifier.regexp
      match: '[?+*]|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??'
    - name: keyword.operator.or.regexp
      match: \|
    - name: meta.group.assertion.regexp
      begin: (\()((\?=)|(\?!)|(\?<=)|(\?<!))
      beginCaptures:
        '1': { name: punctuation.definition.group.regexp }
        '2': { name: punctuation.definition.group.assertion.regexp }
        '3': { name: meta.assertion.look-ahead.regexp }
        '4': { name: meta.assertion.negative-look-ahead.regexp }
        '5': { name: meta.assertion.look-behind.regexp }
        '6': { name: meta.assertion.negative-look-behind.regexp }
      end: (\))
      endCaptures:
        '1': {name: punctuation.definition.group.regexp }
      patterns:
      - include: '#regexp'
    - name: meta.group.regexp
      begin: \((?:(\?:)|(?:\?<([a-zA-Z_$][\w$]*)>))?
      beginCaptures:
        '0': { name: punctuation.definition.group.regexp }
        '1': { name: punctuation.definition.group.no-capture.regexp }
        '2': { name: variable.other.regexp }
      end: \)
      endCaptures:
        '0': { name: punctuation.definition.group.regexp }
      patterns:
      - include: '#regexp'
    - name: constant.other.character-class.set.regexp
      begin: (\[)(\^)?
      beginCaptures:
        '1': { name: punctuation.definition.character-class.regexp }
        '2': { name: keyword.operator.negation.regexp }
      end: (\])
      endCaptures:
        '1': {name: punctuation.definition.character-class.regexp }
      patterns:
      - name: constant.other.character-class.range.regexp
        match: (?:.|(\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\c[A-Z])|(\\.))\-(?:[^\]\\]|(\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\c[A-Z])|(\\.))
        captures:
          '1': { name: constant.character.numeric.regexp }
          '2': { name: constant.character.control.regexp }
          '3': { name: constant.character.escape.backslash.regexp }
          '4': { name: constant.character.numeric.regexp }
          '5': { name: constant.character.control.regexp }
          '6': { name: constant.character.escape.backslash.regexp }
      - include: '#regex-character-class'
    - include: '#regex-character-class'
  # }}}
  regex-character-class: # {{{
    patterns:
    - name: constant.other.character-class.regexp
      match: \\[wWsSdDtrnvf]|\.
    - name: constant.character.numeric.regexp
      match: \\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})
    - name: constant.character.control.regexp
      match: \\c[A-Z]
    - name: constant.character.escape.backslash.regexp
      match: \\.
  # }}}
  require-declarator: # {{{
    patterns:
    - include: '#enum-statement-body'
    - include: '#struct-statement-body'
    - include: '#tuple-statement-body'
    - include: '#extern-declarator'
  # }}}
  require-extern-statement: # {{{
    begin: '^\s*(require\|extern)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.require-extern.ks' }
    end: '(?<=\}|$)'
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.require-extern.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.require-extern.end.bracket.curly.ks' }
      patterns:
      - include: '#extern-declarator'
    - include: '#extern-declarator'
    - include: '#comma'
  # }}}
  require-import-statement: # {{{
    begin: '^\s*(require\|import)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.dependency.require-import.ks' }
    end: '(?<=\}|$)'
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.require-import.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.require-import.end.bracket.curly.ks' }
      patterns:
      - include: '#import-declarator'
      - include: '#attribute'
      - include: '#comment'
    - include: '#import-declarator'
  # }}}
  require-statement: # {{{
    begin: '^\s*(require)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.require.ks' }
    end: '(?<=\}|$)'
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.require.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.require.end.bracket.curly.ks' }
      patterns:
      - include: '#require-declarator'
    - include: '#require-declarator'
    - include: '#comma'
  # }}}
  return-expression: # {{{
    begin: '(\breturn)\s+'
    beginCaptures:
      '1': { name: 'keyword.control.flow.return.ks' }
    end: '$'
    patterns:
    - include: '#if-else-expression'
    - include: '#unless-expression'
    - include: '#expression'
  # }}}
  return-statement: # {{{
    begin: '^\s*(return)\s+(?={{expression-beginning}}|$)'
    beginCaptures:
      '1': { name: 'keyword.control.flow.return.ks' }
    end: '(?=\}|$)'
    patterns:
    - include: '#if-else-expression'
    - include: '#unless-expression'
    - include: '#expression'
  # }}}
  statements: # {{{
    patterns:
    - include: '#comment'
    - begin: '^\s*(?=abstract\b|async\b|auto\b|class\b|const\b|enum\b|final\b|flagged\b|func\b|lateinit\b|let\b|macro\b|namespace\b|sealed\b|type\b)'
      end: '(?<=\}|$)'
      patterns:
      - include: '#auto-statement'
      - include: '#class-statement'
      - include: '#const-statement'
      - include: '#enum-statement'
      - include: '#function-statement'
      - include: '#lateinit-statement'
      - include: '#let-statement'
      - include: '#macro-statement'
      - include: '#namespace-statement'
      - include: '#type-statement'
      - include: '#expression-statement'
    - include: '#attribute'
    - include: '#break-statement'
    - include: '#continue-statement'
    - include: '#delete-statement'
    - include: '#do-statement'
    - include: '#else-statement'
    - include: '#else-if-statement'
    - include: '#fallthrough-statement'
    - include: '#for-statement'
    - include: '#if-statement'
    - include: '#implement-statement'
    - include: '#return-statement'
    - include: '#struct-statement'
    - include: '#switch-statement'
    - include: '#throw-statement'
    - include: '#try-catch-statement'
    - include: '#tuple-statement'
    - include: '#unless-statement'
    - include: '#until-statement'
    - include: '#while-statement'
    - include: '#expression-statement'
    - include: '#block'
  # }}}
  string: # {{{
    patterns:
    - name: string.quoted.single.ks
      begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.ks}
      end: "'"
      endCaptures:
        '0': {name: punctuation.definition.string.end.ks}
      patterns:
      - include: '#string-escapes'
    - name: string.quoted.double.ks
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.ks}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.end.ks}
      patterns:
      - include: '#string-escapes'
    - begin: '`'
      beginCaptures:
        '0': {name: punctuation.definition.string.template.begin.ks}
      end: '`'
      endCaptures:
        '0': {name: punctuation.definition.string.template.end.ks}
      patterns:
      - include: '#template'
      - include: '#string-escapes'
      - name: string.template.ks
        match: (?:[^\\`]|\\(?:[^\(]|$))*
  # }}}
  string-escapes: # {{{
    patterns:
    - name: invalid.illegal.unicode-escape.ks
      match: \\u(?![A-Fa-f0-9]{4}|{[A-Fa-f0-9]+})[^'"]*
    - name: constant.character.escape.ks
      match: \\u(?:[A-Fa-f0-9]{4}|({)([A-Fa-f0-9]+)(}))
      captures:
        '1': {name: punctuation.definition.unicode-escape.begin.bracket.curly.ks}
        '2':
          patterns:
          - name: invalid.illegal.unicode-escape.ks
            match: '[A-Fa-f\d]{7,}|(?!10)[A-Fa-f\d]{6}'
        '3': {name: punctuation.definition.unicode-escape.end.bracket.curly.ks}
    - name: constant.character.escape.ks
      match: \\(x\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)
  # }}}
  struct-statement: # {{{
    begin: '(?=^\s*struct\s+{{identifier}}\b)'
    end: '(?<=\}|$)'
    patterns:
    - include: '#struct-statement-body'
  # }}}
  struct-statement-body: # {{{
    patterns:
    - begin: '\b(struct)\s+({{identifier}})(?:\s+(extends)\s+({{identifier}}))?\s*(?=\{)'
      beginCaptures:
        '1': { name: 'storage.type.struct.ks' }
        '2': { name: 'entity.name.type.struct.ks' }
        '3': { name: 'storage.modifier.extends.ks' }
        '4': { name: 'entity.name.type.struct.ks' }
      end: '(?<=\}|$)'
      patterns:
      - begin: '\{'
        beginCaptures:
          '0': { name: 'punctuation.definition.struct.begin.bracket.curly.ks' }
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.struct.end.bracket.curly.ks' }
        patterns:
        - begin: '{{identifier}}'
          beginCaptures:
            '0': { name: 'entity.name.variable.field.ks' }
          end: '$'
          patterns:
          - name: 'storage.modifier.nullable.ks'
            match: '\?'
          - name: 'meta.type.annotation.ks'
            begin: ':'
            beginCaptures:
              '0': { name: 'keyword.operator.type.annotation.ks' }
            end: '(?=$|=)'
            patterns:
            - include: '#type'
          - begin: '='
            beginCaptures:
              '0': { name: 'keyword.operator.assignment.ks' }
            end: '$'
            patterns:
            - include: '#expression'
          - include: '#comment'
        - include: '#comment'
    - match: '\b(struct)\s+({{identifier}})(?:\s+(extends)\s+({{identifier}}))?'
      captures:
        '1': { name: 'storage.type.struct.ks' }
        '2': { name: 'entity.name.type.struct.ks' }
        '3': { name: 'storage.modifier.extends.ks' }
        '4': { name: 'entity.name.type.struct.ks' }
  # }}}
  switch-clause: # {{{
    patterns:
    - begin: 'with'
      beginCaptures:
        '0': { name: 'keyword.control.switch.binding.ks' }
      end: (?=\bwhen\b|=>)
      patterns:
      - include: '#expression-without-function'
    - begin: 'when'
      beginCaptures:
        '0': { name: 'keyword.control.switch.binding-condition.ks' }
      end: (?==>)
      patterns:
      - include: '#expression-without-function'
    - begin: '=>'
      beginCaptures:
        '0': { name: 'keyword.control.switch.body.ks' }
      end: (?<=$|\})
      patterns:
      - include: '#block'
      - include: '#return-expression'
      - include: '#throw-expression'
      - include: '#expression'
    - name: 'keyword.operator.range.ks'
      match: '(?<!\.)\<?\.\.\<?(?!\.)'
    - include: '#expression-without-function'
  # }}}
  switch-expression: # {{{
    begin: '(\bswitch\b)'
    beginCaptures:
      '1': { name: 'keyword.control.switch.ks' }
    end: '(?<=\})'
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.switch.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.switch.end.bracket.curly.ks' }
      patterns:
      - include: '#switch-clause'
    - include: '#expression'
  # }}}
  switch-statement: # {{{
    begin: '^\s*(switch)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.switch.ks' }
    end: '(?<=\})'
    patterns:
    - begin: '\{'
      beginCaptures:
        '0': { name: 'punctuation.definition.switch.begin.bracket.curly.ks' }
      end: '\}'
      endCaptures:
        '0': { name: 'punctuation.definition.switch.end.bracket.curly.ks' }
      patterns:
      - include: '#switch-clause'
    - include: '#expression'
  # }}}
  tagged-template: # {{{
    match: '({{identifier}})(?=`)'
    captures:
      '1': { name: 'entity.name.function.tagged-template.ks' }
  # }}}
  template: # {{{
    begin: '\\\('
    beginCaptures:
      '0': { name: 'punctuation.definition.template-expression.begin.ks' }
    end: '\)'
    endCaptures:
      '0': { name: 'punctuation.definition.template-expression.end.ks' }
    patterns:
    - include: '#expression'
  # }}}
  this-expression: # {{{
    patterns:
    - match: '(@)({{identifier}})\b\s*(?!\()'
      captures:
        '1': { name: 'storage.modifier.instance.ks' }
        '2': { name: 'variable.other.instance.ks' }
  # }}}
  throw-expression: # {{{
    begin: '(\bthrow)\s+'
    beginCaptures:
      '1': { name: 'keyword.control.try-catch.throw.ks' }
    end: '$'
    patterns:
      - include: '#expression'
  # }}}
  throw-statement: # {{{
    begin: '^\s*(throw)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.try-catch.throw.ks' }
    end: '$'
    patterns:
    - include: '#if-expression'
    - include: '#unless-expression'
    - include: '#expression'
  # }}}
  try-catch-statement: # {{{
    patterns:
      - begin: '^\s*(try\b)\s*(?=\{)'
        beginCaptures:
          '1': { name: 'keyword.control.try-catch.try.ks' }
        end: '(?<=\})'
        patterns:
        - include: '#block'
      - begin: '^\s*(catch\b)(?:\s+({{identifier}}))?'
        beginCaptures:
          '1': { name: 'keyword.control.try-catch.catch.ks' }
          '2': { name: 'variable.parameter.ks' }
        end: '(?<=\})'
        patterns:
        - include: '#block'
      - begin: '^\s*(finally\b)\s*(?=\{)'
        beginCaptures:
          '1': { name: 'keyword.control.try-catch.finally.ks' }
        end: '(?<=\})'
        patterns:
        - include: '#block'
      - begin: '^\s*(on\b)\s+(\b{{identifier}}\b)\s*(?:(\bcatch)\s+({{identifier}}))?'
        beginCaptures:
          '1': { name: 'keyword.control.try-catch.on.ks' }
          '2': { name: 'entity.name.type.ks' }
          '3': { name: 'keyword.control.try-catch.catch.ks' }
          '4': { name: 'variable.parameter.ks' }
        end: '(?<=\})'
        patterns:
        - include: '#block'
  # }}}
  tuple-statement: # {{{
    begin: '(?=^\s*tuple\s+{{identifier}}\b)'
    end: '(?<=\}|$)'
    patterns:
    - include: '#tuple-statement-body'
  # }}}
  tuple-statement-body: # {{{
    patterns:
    - begin: '\b(tuple)\s+({{identifier}})\s*(?=[\{\(]|extends\b)'
      beginCaptures:
        '1': { name: 'storage.type.tuple.ks' }
        '2': { name: 'entity.name.type.tuple.ks' }
      end: '(?<=[\]\}]|$)'
      patterns:
      - begin: '\('
        beginCaptures:
          '0': { name: 'punctuation.definition.tuple.begin.bracket.round.ks' }
        end: '\)'
        endCaptures:
          '0': { name: 'punctuation.definition.tuple.end.bracket.round.ks' }
        patterns:
        - include: '#type'
        - begin: '='
          beginCaptures:
            '0': { name: 'keyword.operator.assignment.ks' }
          end: '$'
          patterns:
          - include: '#expression'
        - include: '#comma'
      - begin: '\{'
        beginCaptures:
          '0': { name: 'punctuation.definition.tuple.begin.bracket.curly.ks' }
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.tuple.end.bracket.curly.ks' }
        patterns:
        - begin: '{{identifier}}'
          beginCaptures:
            '0': { name: 'entity.name.variable.field.ks' }
          end: '$'
          patterns:
          - name: 'storage.modifier.nullable.ks'
            match: '\?'
          - name: 'meta.type.annotation.ks'
            begin: ':'
            beginCaptures:
              '0': { name: 'keyword.operator.type.annotation.ks' }
            end: '(?=$|=)'
            patterns:
            - include: '#type'
          - begin: '='
            beginCaptures:
              '0': { name: 'keyword.operator.assignment.ks' }
            end: '$'
            patterns:
            - include: '#expression'
          - include: '#comment'
        - include: '#comment'
      - match: '\b(extends)\s+({{identifier}})'
        captures:
          '1': { name: 'storage.modifier.extends.ks' }
          '2': { name: 'entity.name.type.tuple.ks' }
    - match: '\b(tuple)\s+({{identifier}})(?:\s+(extends)\s+({{identifier}}))?'
      captures:
        '1': { name: 'storage.type.tuple.ks' }
        '2': { name: 'entity.name.type.tuple.ks' }
        '3': { name: 'storage.modifier.extends.ks' }
        '4': { name: 'entity.name.type.tuple.ks' }
  # }}}
  type: # {{{
    patterns:
      - name: 'support.type.primitive.ks'
        match: \b(?:Any|any|Array|array|Boolean|bool|class|enum|Error|Function|func(?!\()|Number|number|Object|object|RegExp|String|string|Void|void)\b
      - name: 'support.type.macro.ks'
        match: \b(?:Identifier|Expression)\b
      - begin: '(?=(\basync\s+)?(?:\bfunc)?\()'
        end: '(?=$|\s*\|\||\s*\&\&|\s*[|&]\s*$|\s*[>\)])'
        patterns:
        - name: 'storage.modifier.async.ks'
          match: '\basync\b'
        - name: 'storage.type.function.ks'
          match: '\bfunc\b'
        - include: '#function-parameters'
        - name: 'meta.function.return-type.ks'
          begin: ':'
          beginCaptures:
            '0': { name: 'keyword.operator.type.annotation.ks' }
          end: '(?=$|\s*~|\s*\|\||\s*\&\&|\s*[|&]\s*$|\s*[>\)])'
          patterns:
          - include: '#type'
        - name: 'meta.throwables.ks'
          begin: '~'
          beginCaptures:
            '0': { name: 'storage.modifier.throwables.ks' }
          end: '(?=$|\s*\|\||\s*\&\&)'
          patterns:
          - include: '#type'
          - include: '#comma'
      - name: 'entity.name.type.ks'
        match: '{{identifier}}'
      - name: 'storage.modifier.nullable.ks'
        match: '\?'
      - name: 'keyword.operator.type.union.ks'
        match: '\|\|?'
      - name: 'keyword.operator.type.fusion.ks'
        match: '\&\&?'
      - name: 'keyword.operator.type.exclusion.ks'
        match: '\^\^?'
      - include: '#type-generic'
      - begin: '\['
        beginCaptures:
          '0': { name: 'punctuation.definition.array.begin.bracket.square.ks' }
        end: '\]'
        endCaptures:
          '0': { name: 'punctuation.definition.array.end.bracket.square.ks' }
        patterns:
        - include: '#type'
        - include: '#comma'
      - begin: '\{'
        beginCaptures:
          '0': { name: 'punctuation.definition.object.begin.bracket.curly.ks' }
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.object.end.bracket.curly.ks' }
        patterns:
        - include: '#type-object'
      - include: '#comment'
  # }}}
  type-generic: # {{{
    begin: '<'
    beginCaptures:
      '0': { name: 'punctuation.definition.typeparameters.begin.ks' }
    end: '>'
    endCaptures:
      '0': { name: 'punctuation.definition.typeparameters.end.ks' }
    patterns:
    - include: '#type'
  # }}}
  type-object: # // {{{
    patterns:
    - begin: '(?:(\basync)\s+)?(?:(\bfunc)\s+)?({{identifier}})(?=\()'
      beginCaptures:
        '1': { name: 'storage.modifier.async.ks' }
        '2': { name: 'storage.type.function.ks' }
        '3': { name: 'entity.name.function.ks' }
      end: '(?=$|,|\})'
      patterns:
      - include: '#function-parameters'
      - include: '#function-return-type'
      - include: '#function-throwables'
    - begin: '({{identifier}})(:)'
      beginCaptures:
        '1': { name: 'meta.object.key.ks' }
        '2': { name: 'keyword.operator.type.annotation.ks' }
      end: '(?=$|,|\})'
      patterns:
      - include: '#type'
    - include: '#comma'
    - include: '#comment'
  # }}}
  type-statement: # {{{
    patterns:
      - begin: '(\btype)\s+({{identifier}})\s*(=)\s*(?=[_$[:alnum:]\(\{\[])'
        beginCaptures:
          '1': { name: 'storage.type.type.ks' }
          '2': { name: 'entity.name.type.alias.ks' }
          '3': { name: 'keyword.operator.assignment.ks' }
        end: '$'
        patterns:
        - include: '#type'
      - begin: '(\btype)\s+({{identifier}})\s*(=)\s*(?=\/\/|$)'
        beginCaptures:
          '1': { name: 'storage.type.type.ks' }
          '2': { name: 'entity.name.type.alias.ks' }
          '3': { name: 'keyword.operator.assignment.ks' }
        end: '^$'
        patterns:
        - include: '#type'
  # }}}
  unless-expression: # {{{
    begin: '\b(unless)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.conditional.unless.ks' }
    end: '$'
    patterns:
    - include: '#expression'
  # }}}
  unless-statement: # {{{
    begin: '(?=^\s*unless\s+{{expression-beginning}})'
    end: '(?<=\})'
    patterns:
    - begin: '\b(unless)\b'
      beginCaptures:
        '1': { name: 'keyword.control.conditional.unless.ks' }
      end: '(?=\{)'
      patterns:
      - include: '#expression'
    - include: '#block'
  # }}}
  until-statement: # {{{
    begin: '^\s*(until)\s+(?={{expression-beginning}})'
    beginCaptures:
      '1': { name: 'keyword.control.loop.until.ks' }
    end: '$'
    patterns:
    - include: '#block'
    - include: '#expression'
  # }}}
  variable: # {{{
    patterns:
    - name: variable.language.super.ks
      match: (?<![$\.])\b(super)\b(?!\s*:|\$)
    - name: variable.language.this.ks
      match: (?<![$\.])\b(this)\b(?!\s*:|\$)
    - name: variable.language.super.ks
      match: (?<=\.\.\.)\b(super)\b(?!\s*:|\$)
    - name: variable.language.this.ks
      match: (?<=\.\.\.)\b(this)\b(?!\s*:|\$)
    - match: (?<=\?)\s+(super)\s+(?=:)
      captures:
        '1': { name: variable.language.super.ks }
    - match: (?<=\?)\s+(this)\s+(?=:)
      captures:
        '1': { name: variable.language.this.ks }
    - name: variable.language.precursor.ks
      match: (?<![$\.])\b(precursor)\b(?!\s*:|\$)
  # }}}
  while-statement: # {{{
    begin: '(?=^\s*while\s+(?:{{expression-beginning}}|$))'
    end: '(?<=\}|$)'
    patterns:
    - begin: '\b(while)\s+(const)\s*(\{)'
      beginCaptures:
        '1': { name: 'keyword.control.loop.while.ks' }
        '2': { name: 'storage.type.constant.ks' }
        '3': { name: 'punctuation.definition.binding-pattern.object.begin.bracket.square.ks' }
      end: '(?=\{)'
      patterns:
      - begin: '(?<=\{)'
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.binding-pattern.object.end.bracket.square.ks' }
        patterns:
          - include: '#const-statement-variable'
      - begin: '(\=)'
        beginCaptures:
          '1': { name: 'keyword.operator.assignment.ks' }
        end: '(?=\{)'
        patterns:
        - include: '#expression'
    - begin: '\b(while)\s+(const)(?=\s+[_$[:alpha:]\[])'
      beginCaptures:
        '1': { name: 'keyword.control.loop.while.ks' }
        '2': { name: 'storage.type.constant.ks' }
      end: '(?=\{)'
      patterns:
      - include: '#const-statement-variable'
      - begin: '(\=)'
        beginCaptures:
          '1': { name: 'keyword.operator.assignment.ks' }
        end: '(?=\{)'
        patterns:
        - include: '#expression'
    - begin: '\b(while)\s+(let)\s*(\{)'
      beginCaptures:
        '1': { name: 'keyword.control.loop.while.ks' }
        '2': { name: 'storage.type.readwrite.ks' }
        '3': { name: 'punctuation.definition.binding-pattern.object.begin.bracket.curly.ks' }
      end: '(?=\{)'
      patterns:
      - begin: '(?<=\{)'
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.binding-pattern.object.end.bracket.curly.ks' }
        patterns:
          - include: '#let-statement-variable'
      - begin: '(=)'
        beginCaptures:
          '1': { name: 'keyword.operator.assignment.ks' }
        end: '(?=\{)'
        patterns:
        - include: '#expression'
    - begin: '\b(while)\s+(let)(?=\s+[_$[:alpha:]\[])'
      beginCaptures:
        '1': { name: 'keyword.control.loop.while.ks' }
        '2': { name: 'storage.type.readwrite.ks' }
      end: '(?=\{)'
      patterns:
      - include: '#let-statement-variable'
      - begin: '(=)'
        beginCaptures:
          '1': { name: 'keyword.operator.assignment.ks' }
        end: '(?=\{)'
        patterns:
        - include: '#expression'
    - begin: '\b(while)\s+(?=\[)'
      beginCaptures:
        '1': { name: 'keyword.control.loop.while.ks' }
      end: '(?=\{)'
      patterns:
      - include: '#binding-array'
      - include: '#expression'
    - begin: '\b(while)(?=\s+\{)'
      beginCaptures:
        '1': { name: 'keyword.control.loop.while.ks' }
      end: '(?=\{)'
      patterns:
      - begin: '(?<=if)\s+(\{)'
        beginCaptures:
          '1': { name: 'punctuation.definition.binding-pattern.object.begin.bracket.curly.ks' }
        end: '\}'
        endCaptures:
          '0': { name: 'punctuation.definition.binding-pattern.object.end.bracket.curly.ks' }
        patterns:
        - include: '#binding-object-elements'
      - include: '#expression'
    - begin: '\bwhile\b'
      beginCaptures:
        '0': { name: 'keyword.control.loop.while.ks' }
      end: '$'
      patterns:
      - include: '#block'
      - include: '#expression'
    - include: '#block'
  # }}}
