original file
-----------------------------------
class Foo {
    foo(_, x) {
    }

    bar(x?, _, z?) {
    }

    baz(x?, _?, z?) {
    }

    qux(...{,3}items) {
    }

    quux(...{1,3}items, x) {
    }
}
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>class Foo {
 class
 ^^^^^
 source.ks storage.type.class.ks
       
      ^
      source.ks
       Foo
       ^^^
       source.ks entity.name.type.class.ks
           
          ^
          source.ks
           {
           ^
           source.ks punctuation.definition.class.begin.bracket.curly.ks
>
>    foo(_, x) {
     
 ^^^^
 source.ks
     foo
     ^^^
     source.ks entity.name.function.ks
        (
        ^
        source.ks punctuation.definition.parameters.begin.bracket.round.ks
         _
         ^
         source.ks variable.parameter.ks
          ,
          ^
          source.ks punctuation.separator.comma.ks
            
           ^
           source.ks
            x
            ^
            source.ks variable.parameter.ks
             )
             ^
             source.ks punctuation.definition.parameters.end.bracket.round.ks
               
              ^
              source.ks
               {
               ^
               source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>    bar(x?, _, z?) {
     
 ^^^^
 source.ks
     bar
     ^^^
     source.ks entity.name.function.ks
        (
        ^
        source.ks punctuation.definition.parameters.begin.bracket.round.ks
         x
         ^
         source.ks variable.parameter.ks
          ?
          ^
          source.ks storage.modifier.nullable.ks
           ,
           ^
           source.ks punctuation.separator.comma.ks
             
            ^
            source.ks
             _
             ^
             source.ks variable.parameter.ks
              ,
              ^
              source.ks punctuation.separator.comma.ks
                
               ^
               source.ks
                z
                ^
                source.ks variable.parameter.ks
                 ?
                 ^
                 source.ks storage.modifier.nullable.ks
                  )
                  ^
                  source.ks punctuation.definition.parameters.end.bracket.round.ks
                    
                   ^
                   source.ks
                    {
                    ^
                    source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>    baz(x?, _?, z?) {
     
 ^^^^
 source.ks
     baz
     ^^^
     source.ks entity.name.function.ks
        (
        ^
        source.ks punctuation.definition.parameters.begin.bracket.round.ks
         x
         ^
         source.ks variable.parameter.ks
          ?
          ^
          source.ks storage.modifier.nullable.ks
           ,
           ^
           source.ks punctuation.separator.comma.ks
             
            ^
            source.ks
             _
             ^
             source.ks variable.parameter.ks
              ?
              ^
              source.ks storage.modifier.nullable.ks
               ,
               ^
               source.ks punctuation.separator.comma.ks
                 
                ^
                source.ks
                 z
                 ^
                 source.ks variable.parameter.ks
                  ?
                  ^
                  source.ks storage.modifier.nullable.ks
                   )
                   ^
                   source.ks punctuation.definition.parameters.end.bracket.round.ks
                     
                    ^
                    source.ks
                     {
                     ^
                     source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>    qux(...{,3}items) {
     
 ^^^^
 source.ks
     qux
     ^^^
     source.ks entity.name.function.ks
        (
        ^
        source.ks punctuation.definition.parameters.begin.bracket.round.ks
         ...
         ^^^
         source.ks keyword.operator.rest.ks
            {
            ^
            source.ks punctuation.definition.rest.begin.bracket.curly
             ,
             ^
             source.ks punctuation.separator.comma.ks
              3
              ^
              source.ks constant.numeric.decimal.ks
               }
               ^
               source.ks punctuation.definition.rest.end.bracket.curly
                items
                ^^^^^
                source.ks variable.parameter.ks
                     )
                     ^
                     source.ks punctuation.definition.parameters.end.bracket.round.ks
                       
                      ^
                      source.ks
                       {
                       ^
                       source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>    quux(...{1,3}items, x) {
     
 ^^^^
 source.ks
     quux
     ^^^^
     source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          ...
          ^^^
          source.ks keyword.operator.rest.ks
             {
             ^
             source.ks punctuation.definition.rest.begin.bracket.curly
              1
              ^
              source.ks constant.numeric.decimal.ks
               ,
               ^
               source.ks punctuation.separator.comma.ks
                3
                ^
                source.ks constant.numeric.decimal.ks
                 }
                 ^
                 source.ks punctuation.definition.rest.end.bracket.curly
                  items
                  ^^^^^
                  source.ks variable.parameter.ks
                       ,
                       ^
                       source.ks punctuation.separator.comma.ks
                         
                        ^
                        source.ks
                         x
                         ^
                         source.ks variable.parameter.ks
                          )
                          ^
                          source.ks punctuation.definition.parameters.end.bracket.round.ks
                            
                           ^
                           source.ks
                            {
                            ^
                            source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.block.end.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.class.end.bracket.curly.ks