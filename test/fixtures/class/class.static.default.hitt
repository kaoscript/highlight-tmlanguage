original file
-----------------------------------
class Shape {
    private {
        _color: string = ''
        _type: string = ''
    }
    
    static {
        makeRectangle(color: string): Shape => new Shape('rectangle', color)
    }
    
    constructor(@type, @color)
}
let r = Shape.makeRectangle('black')
expect(r.type).to.equal('rectangle')
expect(r.color).to.equal('black')
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>class Shape {
 class
 ^^^^^
 source.ks storage.type.class.ks
       
      ^
      source.ks
       Shape
       ^^^^^
       source.ks entity.name.type.class.ks
             
            ^
            source.ks
             {
             ^
             source.ks punctuation.definition.class.begin.bracket.curly.ks
>
>    private {
     
 ^^^^
 source.ks
     private
     ^^^^^^^
     source.ks storage.modifier.access.ks
             
            ^
            source.ks
             {
             ^
             source.ks punctuation.definition.members.begin.bracket.curly.ks
>
>        _color: string = ''
         
 ^^^^^^^^
 source.ks
         _color
         ^^^^^^
         source.ks entity.name.variable.field.ks
               :
               ^
               source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
                 
                ^
                source.ks meta.type.annotation.ks
                 string
                 ^^^^^^
                 source.ks meta.type.annotation.ks support.type.primitive.ks
                        
                       ^
                       source.ks meta.type.annotation.ks
                        =
                        ^
                        source.ks keyword.operator.assignment.ks
                          
                         ^
                         source.ks
                          '
                          ^
                          source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                           '
                           ^
                           source.ks string.quoted.single.ks punctuation.definition.string.end.ks
>
>        _type: string = ''
         
 ^^^^^^^^
 source.ks
         _type
         ^^^^^
         source.ks entity.name.variable.field.ks
              :
              ^
              source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
                
               ^
               source.ks meta.type.annotation.ks
                string
                ^^^^^^
                source.ks meta.type.annotation.ks support.type.primitive.ks
                       
                      ^
                      source.ks meta.type.annotation.ks
                       =
                       ^
                       source.ks keyword.operator.assignment.ks
                         
                        ^
                        source.ks
                         '
                         ^
                         source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                          '
                          ^
                          source.ks string.quoted.single.ks punctuation.definition.string.end.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.members.end.bracket.curly.ks
>
>    
     
 ^^^^^
 source.ks
>
>    static {
     
 ^^^^
 source.ks
     static
     ^^^^^^
     source.ks storage.modifier.access.ks
            
           ^
           source.ks
            {
            ^
            source.ks punctuation.definition.members.begin.bracket.curly.ks
>
>        makeRectangle(color: string): Shape => new Shape('rectangle', color)
         
 ^^^^^^^^
 source.ks
         makeRectangle
         ^^^^^^^^^^^^^
         source.ks entity.name.function.ks
                      (
                      ^
                      source.ks punctuation.definition.parameters.begin.bracket.round.ks
                       color
                       ^^^^^
                       source.ks variable.parameter.ks
                            :
                            ^
                            source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
                              
                             ^
                             source.ks meta.type.annotation.ks
                              string
                              ^^^^^^
                              source.ks meta.type.annotation.ks support.type.primitive.ks
                                    )
                                    ^
                                    source.ks punctuation.definition.parameters.end.bracket.round.ks
                                     :
                                     ^
                                     source.ks meta.function.return-type.ks keyword.operator.type.annotation.ks
                                       
                                      ^
                                      source.ks meta.function.return-type.ks
                                       Shape
                                       ^^^^^
                                       source.ks meta.function.return-type.ks entity.name.type.ks
                                             
                                            ^
                                            source.ks
                                             =>
                                             ^^
                                             source.ks storage.type.function.arrow.ks
                                                
                                               ^
                                               source.ks
                                                new
                                                ^^^
                                                source.ks keyword.operator.new.ks
                                                    
                                                   ^
                                                   source.ks
                                                    Shape
                                                    ^^^^^
                                                    source.ks entity.name.type.ks
                                                         (
                                                         ^
                                                         source.ks punctuation.definition.arguments.begin.bracket.round.ks
                                                          '
                                                          ^
                                                          source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                                                           rectangle
                                                           ^^^^^^^^^
                                                           source.ks string.quoted.single.ks
                                                                    '
                                                                    ^
                                                                    source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                                                                     ,
                                                                     ^
                                                                     source.ks punctuation.separator.comma.ks
                                                                       
                                                                      ^
                                                                      source.ks
                                                                       color
                                                                       ^^^^^
                                                                       source.ks variable.other.ks
                                                                            )
                                                                            ^
                                                                            source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.members.end.bracket.curly.ks
>
>    
     
 ^^^^^
 source.ks
>
>    constructor(@type, @color)
     
 ^^^^
 source.ks
     constructor
     ^^^^^^^^^^^
     source.ks storage.type.constructor.ks
                (
                ^
                source.ks punctuation.definition.parameters.begin.bracket.round.ks
                 @
                 ^
                 source.ks storage.modifier.at.ks
                  type
                  ^^^^
                  source.ks variable.parameter.ks
                      ,
                      ^
                      source.ks punctuation.separator.comma.ks
                        
                       ^
                       source.ks
                        @
                        ^
                        source.ks storage.modifier.at.ks
                         color
                         ^^^^^
                         source.ks variable.parameter.ks
                              )
                              ^
                              source.ks punctuation.definition.parameters.end.bracket.round.ks
>
>}
 }
 ^
 source.ks punctuation.definition.class.end.bracket.curly.ks
>
>let r = Shape.makeRectangle('black')
 let
 ^^^
 source.ks storage.type.readwrite.ks
     
    ^
    source.ks
     r
     ^
     source.ks meta.definition.variable.ks variable.other.readwrite.ks
       
      ^
      source.ks
       =
       ^
       source.ks keyword.operator.assignment.ks
         
        ^
        source.ks
         Shape
         ^^^^^
         source.ks variable.other.object.ks
              .
              ^
              source.ks punctuation.accessor.object.ks
               makeRectangle
               ^^^^^^^^^^^^^
               source.ks entity.name.function.ks
                            (
                            ^
                            source.ks punctuation.definition.arguments.begin.bracket.round.ks
                             '
                             ^
                             source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                              black
                              ^^^^^
                              source.ks string.quoted.single.ks
                                   '
                                   ^
                                   source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                                    )
                                    ^
                                    source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>expect(r.type).to.equal('rectangle')
 expect
 ^^^^^^
 source.ks entity.name.function.ks
       (
       ^
       source.ks punctuation.definition.arguments.begin.bracket.round.ks
        r
        ^
        source.ks variable.other.object.ks
         .
         ^
         source.ks punctuation.accessor.object.ks
          type
          ^^^^
          source.ks variable.other.property.object.ks
              )
              ^
              source.ks punctuation.definition.arguments.end.bracket.round.ks
               .
               ^
               source.ks punctuation.accessor.object.ks
                to
                ^^
                source.ks variable.other.object.ks
                  .
                  ^
                  source.ks punctuation.accessor.object.ks
                   equal
                   ^^^^^
                   source.ks entity.name.function.ks
                        (
                        ^
                        source.ks punctuation.definition.arguments.begin.bracket.round.ks
                         '
                         ^
                         source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                          rectangle
                          ^^^^^^^^^
                          source.ks string.quoted.single.ks
                                   '
                                   ^
                                   source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                                    )
                                    ^
                                    source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>expect(r.color).to.equal('black')
 expect
 ^^^^^^
 source.ks entity.name.function.ks
       (
       ^
       source.ks punctuation.definition.arguments.begin.bracket.round.ks
        r
        ^
        source.ks variable.other.object.ks
         .
         ^
         source.ks punctuation.accessor.object.ks
          color
          ^^^^^
          source.ks variable.other.property.object.ks
               )
               ^
               source.ks punctuation.definition.arguments.end.bracket.round.ks
                .
                ^
                source.ks punctuation.accessor.object.ks
                 to
                 ^^
                 source.ks variable.other.object.ks
                   .
                   ^
                   source.ks punctuation.accessor.object.ks
                    equal
                    ^^^^^
                    source.ks entity.name.function.ks
                         (
                         ^
                         source.ks punctuation.definition.arguments.begin.bracket.round.ks
                          '
                          ^
                          source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                           black
                           ^^^^^
                           source.ks string.quoted.single.ks
                                '
                                ^
                                source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                                 )
                                 ^
                                 source.ks punctuation.definition.arguments.end.bracket.round.ks