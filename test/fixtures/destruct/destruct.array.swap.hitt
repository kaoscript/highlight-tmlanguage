original file
-----------------------------------
let left = 10
let right = 20

if right > left {
    [left, right] = [right, left]
}
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>let left = 10
 let
 ^^^
 source.ks storage.type.readwrite.ks
     
    ^
    source.ks
     left
     ^^^^
     source.ks meta.definition.variable.ks variable.other.readwrite.ks
          
         ^
         source.ks
          =
          ^
          source.ks keyword.operator.assignment.ks
            
           ^
           source.ks
            10
            ^^
            source.ks constant.numeric.decimal.ks
>
>let right = 20
 let
 ^^^
 source.ks storage.type.readwrite.ks
     
    ^
    source.ks
     right
     ^^^^^
     source.ks meta.definition.variable.ks variable.other.readwrite.ks
           
          ^
          source.ks
           =
           ^
           source.ks keyword.operator.assignment.ks
             
            ^
            source.ks
             20
             ^^
             source.ks constant.numeric.decimal.ks
>
>
 
 ^
 source.ks
>
>if right > left {
 if
 ^^
 source.ks keyword.control.conditional.if.ks
    
   ^
   source.ks
    right
    ^^^^^
    source.ks variable.other.ks
          
         ^
         source.ks
          >
          ^
          source.ks keyword.operator.comparison.ks
            
           ^
           source.ks
            left
            ^^^^
            source.ks variable.other.ks
                 
                ^
                source.ks
                 {
                 ^
                 source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    [left, right] = [right, left]
     
 ^^^^
 source.ks
     [
     ^
     source.ks punctuation.definition.array.begin.bracket.square.ks
      left
      ^^^^
      source.ks variable.other.ks
          ,
          ^
          source.ks punctuation.separator.comma.ks
            
           ^
           source.ks
            right
            ^^^^^
            source.ks variable.other.ks
                 ]
                 ^
                 source.ks punctuation.definition.array.end.bracket.square.ks
                   
                  ^
                  source.ks
                   =
                   ^
                   source.ks keyword.operator.assignment.ks
                     
                    ^
                    source.ks
                     [
                     ^
                     source.ks punctuation.definition.array.begin.bracket.square.ks
                      right
                      ^^^^^
                      source.ks variable.other.ks
                           ,
                           ^
                           source.ks punctuation.separator.comma.ks
                             
                            ^
                            source.ks
                             left
                             ^^^^
                             source.ks variable.other.ks
                                 ]
                                 ^
                                 source.ks punctuation.definition.array.end.bracket.square.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks