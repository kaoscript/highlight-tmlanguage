original file
-----------------------------------
const [x, y]: [Number, Number] = foo()

const [x, y]: Array<Number> = foo()

const {x, y}: {x: Number, y: Number} = foo()

const {x, y}: Object<Number> = foo()
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>const [x, y]: [Number, Number] = foo()
 const
 ^^^^^
 source.ks storage.type.constant.ks
       
      ^
      source.ks
       [
       ^
       source.ks punctuation.definition.binding-pattern.array.begin.bracket.square.ks
        x
        ^
        source.ks variable.other.ks
         ,
         ^
         source.ks punctuation.separator.comma.ks
           
          ^
          source.ks
           y
           ^
           source.ks variable.other.ks
            ]
            ^
            source.ks punctuation.definition.binding-pattern.array.end.bracket.square.ks
             :
             ^
             source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
               
              ^
              source.ks meta.type.annotation.ks
               [
               ^
               source.ks meta.type.annotation.ks punctuation.definition.array.begin.bracket.square.ks
                Number
                ^^^^^^
                source.ks meta.type.annotation.ks support.type.primitive.ks
                      ,
                      ^
                      source.ks meta.type.annotation.ks punctuation.separator.comma.ks
                        
                       ^
                       source.ks meta.type.annotation.ks
                        Number
                        ^^^^^^
                        source.ks meta.type.annotation.ks support.type.primitive.ks
                              ]
                              ^
                              source.ks meta.type.annotation.ks punctuation.definition.array.end.bracket.square.ks
                                
                               ^
                               source.ks
                                =
                                ^
                                source.ks keyword.operator.assignment.ks
                                  
                                 ^
                                 source.ks
                                  foo
                                  ^^^
                                  source.ks entity.name.function.ks
                                     (
                                     ^
                                     source.ks punctuation.definition.arguments.begin.bracket.round.ks
                                      )
                                      ^
                                      source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>
 
 ^
 source.ks
>
>const [x, y]: Array<Number> = foo()
 const
 ^^^^^
 source.ks storage.type.constant.ks
       
      ^
      source.ks
       [
       ^
       source.ks punctuation.definition.binding-pattern.array.begin.bracket.square.ks
        x
        ^
        source.ks variable.other.ks
         ,
         ^
         source.ks punctuation.separator.comma.ks
           
          ^
          source.ks
           y
           ^
           source.ks variable.other.ks
            ]
            ^
            source.ks punctuation.definition.binding-pattern.array.end.bracket.square.ks
             :
             ^
             source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
               
              ^
              source.ks meta.type.annotation.ks
               Array
               ^^^^^
               source.ks meta.type.annotation.ks support.type.primitive.ks
                    <
                    ^
                    source.ks meta.type.annotation.ks punctuation.definition.typeparameters.begin.ks
                     Number
                     ^^^^^^
                     source.ks meta.type.annotation.ks support.type.primitive.ks
                           >
                           ^
                           source.ks meta.type.annotation.ks punctuation.definition.typeparameters.end.ks
                             
                            ^
                            source.ks
                             =
                             ^
                             source.ks keyword.operator.assignment.ks
                               
                              ^
                              source.ks
                               foo
                               ^^^
                               source.ks entity.name.function.ks
                                  (
                                  ^
                                  source.ks punctuation.definition.arguments.begin.bracket.round.ks
                                   )
                                   ^
                                   source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>
 
 ^
 source.ks
>
>const {x, y}: {x: Number, y: Number} = foo()
 const
 ^^^^^
 source.ks storage.type.constant.ks
       
      ^
      source.ks
       {
       ^
       source.ks punctuation.definition.binding-pattern.object.begin.bracket.curly.ks
        x
        ^
        source.ks variable.other.ks
         ,
         ^
         source.ks punctuation.separator.comma.ks
           
          ^
          source.ks
           y
           ^
           source.ks variable.other.ks
            }
            ^
            source.ks punctuation.definition.binding-pattern.object.end.bracket.curly.ks
             :
             ^
             source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
               
              ^
              source.ks meta.type.annotation.ks
               {
               ^
               source.ks meta.type.annotation.ks punctuation.definition.object.begin.bracket.curly.ks
                x
                ^
                source.ks meta.type.annotation.ks variable.object.property.ks
                 :
                 ^
                 source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
                   
                  ^
                  source.ks meta.type.annotation.ks
                   Number
                   ^^^^^^
                   source.ks meta.type.annotation.ks support.type.primitive.ks
                         ,
                         ^
                         source.ks meta.type.annotation.ks punctuation.separator.comma.ks
                           
                          ^
                          source.ks meta.type.annotation.ks
                           y
                           ^
                           source.ks meta.type.annotation.ks variable.object.property.ks
                            :
                            ^
                            source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
                              
                             ^
                             source.ks meta.type.annotation.ks
                              Number
                              ^^^^^^
                              source.ks meta.type.annotation.ks support.type.primitive.ks
                                    }
                                    ^
                                    source.ks meta.type.annotation.ks punctuation.definition.object.end.bracket.curly.ks
                                      
                                     ^
                                     source.ks
                                      =
                                      ^
                                      source.ks keyword.operator.assignment.ks
                                        
                                       ^
                                       source.ks
                                        foo
                                        ^^^
                                        source.ks entity.name.function.ks
                                           (
                                           ^
                                           source.ks punctuation.definition.arguments.begin.bracket.round.ks
                                            )
                                            ^
                                            source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>
 
 ^
 source.ks
>
>const {x, y}: Object<Number> = foo()
 const
 ^^^^^
 source.ks storage.type.constant.ks
       
      ^
      source.ks
       {
       ^
       source.ks punctuation.definition.binding-pattern.object.begin.bracket.curly.ks
        x
        ^
        source.ks variable.other.ks
         ,
         ^
         source.ks punctuation.separator.comma.ks
           
          ^
          source.ks
           y
           ^
           source.ks variable.other.ks
            }
            ^
            source.ks punctuation.definition.binding-pattern.object.end.bracket.curly.ks
             :
             ^
             source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
               
              ^
              source.ks meta.type.annotation.ks
               Object
               ^^^^^^
               source.ks meta.type.annotation.ks support.type.primitive.ks
                     <
                     ^
                     source.ks meta.type.annotation.ks punctuation.definition.typeparameters.begin.ks
                      Number
                      ^^^^^^
                      source.ks meta.type.annotation.ks support.type.primitive.ks
                            >
                            ^
                            source.ks meta.type.annotation.ks punctuation.definition.typeparameters.end.ks
                              
                             ^
                             source.ks
                              =
                              ^
                              source.ks keyword.operator.assignment.ks
                                
                               ^
                               source.ks
                                foo
                                ^^^
                                source.ks entity.name.function.ks
                                   (
                                   ^
                                   source.ks punctuation.definition.arguments.begin.bracket.round.ks
                                    )
                                    ^
                                    source.ks punctuation.definition.arguments.end.bracket.round.ks