original file
-----------------------------------
let key = 'qux'
let { [key]: foo } = { qux: 'bar' }
console.log(foo)
// <- 'bar'
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>let key = 'qux'
 let
 ^^^
 source.ks storage.type.readwrite.ks
     
    ^
    source.ks
     key
     ^^^
     source.ks meta.definition.variable.ks variable.other.readwrite.ks
         
        ^
        source.ks
         =
         ^
         source.ks keyword.operator.assignment.ks
           
          ^
          source.ks
           '
           ^
           source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
            qux
            ^^^
            source.ks string.quoted.single.ks
               '
               ^
               source.ks string.quoted.single.ks punctuation.definition.string.end.ks
>
>let { [key]: foo } = { qux: 'bar' }
 let
 ^^^
 source.ks storage.type.readwrite.ks
     
    ^
    source.ks
     {
     ^
     source.ks punctuation.definition.binding-pattern.object.begin.bracket.curly.ks
       
      ^
      source.ks
       [
       ^
       source.ks meta.object-literal.key.ks punctuation.definition.array.begin.bracket.square.ks
        key
        ^^^
        source.ks meta.object-literal.key.ks variable.other.ks
           ]
           ^
           source.ks meta.object-literal.key.ks punctuation.definition.array.end.bracket.square.ks
            :
            ^
            source.ks punctuation.separator.key-value.ks
              
             ^
             source.ks
              foo
              ^^^
              source.ks variable.other.ks
                  
                 ^
                 source.ks
                  }
                  ^
                  source.ks punctuation.definition.binding-pattern.object.end.bracket.curly.ks
                    
                   ^
                   source.ks
                    =
                    ^
                    source.ks keyword.operator.assignment.ks
                      
                     ^
                     source.ks
                      {
                      ^
                      source.ks punctuation.definition.object.begin.bracket.curly.ks
                        
                       ^
                       source.ks
                        qux
                        ^^^
                        source.ks meta.object.key.ks
                           :
                           ^
                           source.ks punctuation.separator.key-value.ks
                             
                            ^
                            source.ks
                             '
                             ^
                             source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                              bar
                              ^^^
                              source.ks string.quoted.single.ks
                                 '
                                 ^
                                 source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                                   
                                  ^
                                  source.ks
                                   }
                                   ^
                                   source.ks punctuation.definition.object.end.bracket.curly.ks
>
>console.log(foo)
 console
 ^^^^^^^
 source.ks variable.other.object.ks
        .
        ^
        source.ks punctuation.accessor.object.ks
         log
         ^^^
         source.ks entity.name.function.ks
            (
            ^
            source.ks punctuation.definition.arguments.begin.bracket.round.ks
             foo
             ^^^
             source.ks variable.other.ks
                )
                ^
                source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>// <- 'bar'
 //
 ^^
 source.ks comment.line.double-slash.ks punctuation.definition.comment.ks
    <- 'bar'
   ^^^^^^^^^
   source.ks comment.line.double-slash.ks