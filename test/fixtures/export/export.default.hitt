original file
-----------------------------------
export let foo = 'I\'m foo!'
export const c = 3
export const b = 5
export func foo() {
    return c + b
}
export class BarQux {
    private {
        a: int
    }
    
    BarQux(@a)
}
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>export let foo = 'I\'m foo!'
 export
 ^^^^^^
 source.ks keyword.control.export.ks
        
       ^
       source.ks
        let
        ^^^
        source.ks storage.type.readwrite.ks
            
           ^
           source.ks
            foo
            ^^^
            source.ks meta.definition.variable.ks variable.other.readwrite.ks
                
               ^
               source.ks
                =
                ^
                source.ks keyword.operator.assignment.ks
                  
                 ^
                 source.ks
                  '
                  ^
                  source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                   I
                   ^
                   source.ks string.quoted.single.ks
                    \'
                    ^^
                    source.ks string.quoted.single.ks constant.character.escape.ks
                      m foo!
                      ^^^^^^
                      source.ks string.quoted.single.ks
                            '
                            ^
                            source.ks string.quoted.single.ks punctuation.definition.string.end.ks
>
>export const c = 3
 export
 ^^^^^^
 source.ks keyword.control.export.ks
        
       ^
       source.ks
        const
        ^^^^^
        source.ks storage.type.constant.ks
              
             ^
             source.ks
              c
              ^
              source.ks meta.definition.variable.ks variable.other.constant.ks
                
               ^
               source.ks
                =
                ^
                source.ks keyword.operator.assignment.ks
                  
                 ^
                 source.ks
                  3
                  ^
                  source.ks constant.numeric.decimal.ks
>
>export const b = 5
 export
 ^^^^^^
 source.ks keyword.control.export.ks
        
       ^
       source.ks
        const
        ^^^^^
        source.ks storage.type.constant.ks
              
             ^
             source.ks
              b
              ^
              source.ks meta.definition.variable.ks variable.other.constant.ks
                
               ^
               source.ks
                =
                ^
                source.ks keyword.operator.assignment.ks
                  
                 ^
                 source.ks
                  5
                  ^
                  source.ks constant.numeric.decimal.ks
>
>export func foo() {
 export
 ^^^^^^
 source.ks keyword.control.export.ks
        
       ^
       source.ks
        func
        ^^^^
        source.ks storage.type.function.ks
             
            ^
            source.ks
             foo
             ^^^
             source.ks entity.name.function.ks
                (
                ^
                source.ks punctuation.definition.parameters.begin.bracket.round.ks
                 )
                 ^
                 source.ks punctuation.definition.parameters.end.bracket.round.ks
                   
                  ^
                  source.ks
                   {
                   ^
                   source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    return c + b
     
 ^^^^
 source.ks
     return
     ^^^^^^
     source.ks keyword.control.flow.return.ks
            
           ^
           source.ks
            c
            ^
            source.ks variable.other.ks
              
             ^
             source.ks
              +
              ^
              source.ks keyword.operator.arithmetic.ks
                
               ^
               source.ks
                b
                ^
                source.ks variable.other.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>export class BarQux {
 export
 ^^^^^^
 source.ks keyword.control.export.ks
        
       ^
       source.ks
        class
        ^^^^^
        source.ks storage.type.class.ks
              
             ^
             source.ks
              BarQux
              ^^^^^^
              source.ks entity.name.type.class.ks
                     
                    ^
                    source.ks
                     {
                     ^
                     source.ks punctuation.definition.class.begin.bracket.curly.ks
>
>    private {
     
 ^^^^
 source.ks
     private
     ^^^^^^^
     source.ks storage.modifier.access.ks
             
            ^
            source.ks
             {
             ^
             source.ks punctuation.definition.members.begin.bracket.curly.ks
>
>        a: int
         
 ^^^^^^^^
 source.ks
         a
         ^
         source.ks entity.name.variable.field.ks
          :
          ^
          source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
            
           ^
           source.ks meta.type.annotation.ks
            int
            ^^^
            source.ks meta.type.annotation.ks entity.name.type.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.members.end.bracket.curly.ks
>
>    
     
 ^^^^^
 source.ks
>
>    BarQux(@a)
     
 ^^^^
 source.ks
     BarQux
     ^^^^^^
     source.ks entity.name.function.ks
           (
           ^
           source.ks punctuation.definition.parameters.begin.bracket.round.ks
            @
            ^
            source.ks storage.modifier.at.ks
             a
             ^
             source.ks variable.parameter.ks
              )
              ^
              source.ks punctuation.definition.parameters.end.bracket.round.ks
>
>}
 }
 ^
 source.ks punctuation.definition.class.end.bracket.curly.ks