original file
-----------------------------------
func foo(x: Number, y: Number, z?) {
    z ??= (z: Number) => [x, y, z]
    
    return z
}
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>func foo(x: Number, y: Number, z?) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      foo
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           :
           ^
           source.ks meta.type.annotation.ks storage.modifier.type.ks
             
            ^
            source.ks meta.type.annotation.ks
             Number
             ^^^^^^
             source.ks meta.type.annotation.ks support.type.primitive.ks
                   ,
                   ^
                   source.ks punctuation.separator.comma.ks
                     
                    ^
                    source.ks
                     y
                     ^
                     source.ks variable.parameter.ks
                      :
                      ^
                      source.ks meta.type.annotation.ks storage.modifier.type.ks
                        
                       ^
                       source.ks meta.type.annotation.ks
                        Number
                        ^^^^^^
                        source.ks meta.type.annotation.ks support.type.primitive.ks
                              ,
                              ^
                              source.ks punctuation.separator.comma.ks
                                
                               ^
                               source.ks
                                z
                                ^
                                source.ks variable.parameter.ks
                                 ?
                                 ^
                                 source.ks storage.modifier.nullable.ks
                                  )
                                  ^
                                  source.ks punctuation.definition.parameters.end.bracket.round.ks
                                    
                                   ^
                                   source.ks
                                    {
                                    ^
                                    source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    z ??= (z: Number) => [x, y, z]
     
 ^^^^
 source.ks
     z
     ^
     source.ks variable.other.ks
       
      ^
      source.ks
       ??=
       ^^^
       source.ks keyword.operator.assignment.compound.ks
           
          ^
          source.ks
           (
           ^
           source.ks punctuation.definition.parameters.begin.bracket.round.ks
            z
            ^
            source.ks variable.parameter.ks
             :
             ^
             source.ks meta.type.annotation.ks storage.modifier.type.ks
               
              ^
              source.ks meta.type.annotation.ks
               Number
               ^^^^^^
               source.ks meta.type.annotation.ks support.type.primitive.ks
                     )
                     ^
                     source.ks punctuation.definition.parameters.end.bracket.round.ks
                       
                      ^
                      source.ks
                       =>
                       ^^
                       source.ks storage.type.function.arrow.ks
                          
                         ^
                         source.ks
                          [
                          ^
                          source.ks punctuation.definition.array.begin.bracket.square.ks
                           x
                           ^
                           source.ks variable.other.ks
                            ,
                            ^
                            source.ks punctuation.separator.comma.ks
                              
                             ^
                             source.ks
                              y
                              ^
                              source.ks variable.other.ks
                               ,
                               ^
                               source.ks punctuation.separator.comma.ks
                                 
                                ^
                                source.ks
                                 z
                                 ^
                                 source.ks variable.other.ks
                                  ]
                                  ^
                                  source.ks punctuation.definition.array.end.bracket.square.ks
>
>    
     
 ^^^^^
 source.ks
>
>    return z
     
 ^^^^
 source.ks
     return
     ^^^^^^
     source.ks keyword.control.flow.return.ks
            
           ^
           source.ks
            z
            ^
            source.ks variable.other.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks