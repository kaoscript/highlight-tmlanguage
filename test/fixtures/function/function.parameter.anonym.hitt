original file
-----------------------------------
func foo(x, _, y) {
    console.log(x, y)
}

func bar(_, x, y) {
    console.log(x, y)
}

func baz(x, y, _) {
    console.log(x, y)
}

func qux(x, ..., y) {
    console.log(x, y)
}

func quux(..., x, y) {
    console.log(x, y)
}

func corge(x, y, ...) {
    console.log(x, y)
}

func grault(...) {
}
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>func foo(x, _, y) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      foo
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           ,
           ^
           source.ks punctuation.separator.comma.ks
             
            ^
            source.ks
             _
             ^
             source.ks variable.parameter.ks
              ,
              ^
              source.ks punctuation.separator.comma.ks
                
               ^
               source.ks
                y
                ^
                source.ks variable.parameter.ks
                 )
                 ^
                 source.ks punctuation.definition.parameters.end.bracket.round.ks
                   
                  ^
                  source.ks
                   {
                   ^
                   source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    console.log(x, y)
     
 ^^^^
 source.ks
     console
     ^^^^^^^
     source.ks variable.other.object.ks
            .
            ^
            source.ks punctuation.accessor.object.ks
             log
             ^^^
             source.ks entity.name.function.ks
                (
                ^
                source.ks punctuation.definition.arguments.begin.bracket.round.ks
                 x
                 ^
                 source.ks variable.other.ks
                  ,
                  ^
                  source.ks punctuation.separator.comma.ks
                    
                   ^
                   source.ks
                    y
                    ^
                    source.ks variable.other.ks
                     )
                     ^
                     source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func bar(_, x, y) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      bar
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          _
          ^
          source.ks variable.parameter.ks
           ,
           ^
           source.ks punctuation.separator.comma.ks
             
            ^
            source.ks
             x
             ^
             source.ks variable.parameter.ks
              ,
              ^
              source.ks punctuation.separator.comma.ks
                
               ^
               source.ks
                y
                ^
                source.ks variable.parameter.ks
                 )
                 ^
                 source.ks punctuation.definition.parameters.end.bracket.round.ks
                   
                  ^
                  source.ks
                   {
                   ^
                   source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    console.log(x, y)
     
 ^^^^
 source.ks
     console
     ^^^^^^^
     source.ks variable.other.object.ks
            .
            ^
            source.ks punctuation.accessor.object.ks
             log
             ^^^
             source.ks entity.name.function.ks
                (
                ^
                source.ks punctuation.definition.arguments.begin.bracket.round.ks
                 x
                 ^
                 source.ks variable.other.ks
                  ,
                  ^
                  source.ks punctuation.separator.comma.ks
                    
                   ^
                   source.ks
                    y
                    ^
                    source.ks variable.other.ks
                     )
                     ^
                     source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func baz(x, y, _) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      baz
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           ,
           ^
           source.ks punctuation.separator.comma.ks
             
            ^
            source.ks
             y
             ^
             source.ks variable.parameter.ks
              ,
              ^
              source.ks punctuation.separator.comma.ks
                
               ^
               source.ks
                _
                ^
                source.ks variable.parameter.ks
                 )
                 ^
                 source.ks punctuation.definition.parameters.end.bracket.round.ks
                   
                  ^
                  source.ks
                   {
                   ^
                   source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    console.log(x, y)
     
 ^^^^
 source.ks
     console
     ^^^^^^^
     source.ks variable.other.object.ks
            .
            ^
            source.ks punctuation.accessor.object.ks
             log
             ^^^
             source.ks entity.name.function.ks
                (
                ^
                source.ks punctuation.definition.arguments.begin.bracket.round.ks
                 x
                 ^
                 source.ks variable.other.ks
                  ,
                  ^
                  source.ks punctuation.separator.comma.ks
                    
                   ^
                   source.ks
                    y
                    ^
                    source.ks variable.other.ks
                     )
                     ^
                     source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func qux(x, ..., y) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      qux
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           ,
           ^
           source.ks punctuation.separator.comma.ks
             
            ^
            source.ks
             ...
             ^^^
             source.ks keyword.operator.rest.ks
                ,
                ^
                source.ks punctuation.separator.comma.ks
                  
                 ^
                 source.ks
                  y
                  ^
                  source.ks variable.parameter.ks
                   )
                   ^
                   source.ks punctuation.definition.parameters.end.bracket.round.ks
                     
                    ^
                    source.ks
                     {
                     ^
                     source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    console.log(x, y)
     
 ^^^^
 source.ks
     console
     ^^^^^^^
     source.ks variable.other.object.ks
            .
            ^
            source.ks punctuation.accessor.object.ks
             log
             ^^^
             source.ks entity.name.function.ks
                (
                ^
                source.ks punctuation.definition.arguments.begin.bracket.round.ks
                 x
                 ^
                 source.ks variable.other.ks
                  ,
                  ^
                  source.ks punctuation.separator.comma.ks
                    
                   ^
                   source.ks
                    y
                    ^
                    source.ks variable.other.ks
                     )
                     ^
                     source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func quux(..., x, y) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      quux
      ^^^^
      source.ks entity.name.function.ks
          (
          ^
          source.ks punctuation.definition.parameters.begin.bracket.round.ks
           ...
           ^^^
           source.ks keyword.operator.rest.ks
              ,
              ^
              source.ks punctuation.separator.comma.ks
                
               ^
               source.ks
                x
                ^
                source.ks variable.parameter.ks
                 ,
                 ^
                 source.ks punctuation.separator.comma.ks
                   
                  ^
                  source.ks
                   y
                   ^
                   source.ks variable.parameter.ks
                    )
                    ^
                    source.ks punctuation.definition.parameters.end.bracket.round.ks
                      
                     ^
                     source.ks
                      {
                      ^
                      source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    console.log(x, y)
     
 ^^^^
 source.ks
     console
     ^^^^^^^
     source.ks variable.other.object.ks
            .
            ^
            source.ks punctuation.accessor.object.ks
             log
             ^^^
             source.ks entity.name.function.ks
                (
                ^
                source.ks punctuation.definition.arguments.begin.bracket.round.ks
                 x
                 ^
                 source.ks variable.other.ks
                  ,
                  ^
                  source.ks punctuation.separator.comma.ks
                    
                   ^
                   source.ks
                    y
                    ^
                    source.ks variable.other.ks
                     )
                     ^
                     source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func corge(x, y, ...) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      corge
      ^^^^^
      source.ks entity.name.function.ks
           (
           ^
           source.ks punctuation.definition.parameters.begin.bracket.round.ks
            x
            ^
            source.ks variable.parameter.ks
             ,
             ^
             source.ks punctuation.separator.comma.ks
               
              ^
              source.ks
               y
               ^
               source.ks variable.parameter.ks
                ,
                ^
                source.ks punctuation.separator.comma.ks
                  
                 ^
                 source.ks
                  ...
                  ^^^
                  source.ks keyword.operator.rest.ks
                     )
                     ^
                     source.ks punctuation.definition.parameters.end.bracket.round.ks
                       
                      ^
                      source.ks
                       {
                       ^
                       source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    console.log(x, y)
     
 ^^^^
 source.ks
     console
     ^^^^^^^
     source.ks variable.other.object.ks
            .
            ^
            source.ks punctuation.accessor.object.ks
             log
             ^^^
             source.ks entity.name.function.ks
                (
                ^
                source.ks punctuation.definition.arguments.begin.bracket.round.ks
                 x
                 ^
                 source.ks variable.other.ks
                  ,
                  ^
                  source.ks punctuation.separator.comma.ks
                    
                   ^
                   source.ks
                    y
                    ^
                    source.ks variable.other.ks
                     )
                     ^
                     source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func grault(...) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      grault
      ^^^^^^
      source.ks entity.name.function.ks
            (
            ^
            source.ks punctuation.definition.parameters.begin.bracket.round.ks
             ...
             ^^^
             source.ks keyword.operator.rest.ks
                )
                ^
                source.ks punctuation.definition.parameters.end.bracket.round.ks
                  
                 ^
                 source.ks
                  {
                  ^
                  source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks