original file
-----------------------------------
func foo(x! = 'foobar') {
}

func bar(x!? = 'foobar') {
}

func baz(x!: String = 'foobar') {
}

func qux(x!: String? = 'foobar') {
}
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>func foo(x! = 'foobar') {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      foo
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           !
           ^
           source.ks storage.modifier.required.ks
             
            ^
            source.ks
             =
             ^
             source.ks keyword.operator.assignment.ks
               
              ^
              source.ks
               '
               ^
               source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                foobar
                ^^^^^^
                source.ks string.quoted.single.ks
                      '
                      ^
                      source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                       )
                       ^
                       source.ks punctuation.definition.parameters.end.bracket.round.ks
                         
                        ^
                        source.ks
                         {
                         ^
                         source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func bar(x!? = 'foobar') {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      bar
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           !
           ^
           source.ks storage.modifier.required.ks
            ?
            ^
            source.ks storage.modifier.nullable.ks
              
             ^
             source.ks
              =
              ^
              source.ks keyword.operator.assignment.ks
                
               ^
               source.ks
                '
                ^
                source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                 foobar
                 ^^^^^^
                 source.ks string.quoted.single.ks
                       '
                       ^
                       source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                        )
                        ^
                        source.ks punctuation.definition.parameters.end.bracket.round.ks
                          
                         ^
                         source.ks
                          {
                          ^
                          source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func baz(x!: String = 'foobar') {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      baz
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           !
           ^
           source.ks storage.modifier.required.ks
            :
            ^
            source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
              
             ^
             source.ks meta.type.annotation.ks
              String
              ^^^^^^
              source.ks meta.type.annotation.ks support.type.primitive.ks
                     
                    ^
                    source.ks
                     =
                     ^
                     source.ks keyword.operator.assignment.ks
                       
                      ^
                      source.ks
                       '
                       ^
                       source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                        foobar
                        ^^^^^^
                        source.ks string.quoted.single.ks
                              '
                              ^
                              source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                               )
                               ^
                               source.ks punctuation.definition.parameters.end.bracket.round.ks
                                 
                                ^
                                source.ks
                                 {
                                 ^
                                 source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func qux(x!: String? = 'foobar') {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      qux
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           !
           ^
           source.ks storage.modifier.required.ks
            :
            ^
            source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
              
             ^
             source.ks meta.type.annotation.ks
              String
              ^^^^^^
              source.ks meta.type.annotation.ks support.type.primitive.ks
                    ?
                    ^
                    source.ks meta.type.annotation.ks storage.modifier.nullable.ks
                      
                     ^
                     source.ks
                      =
                      ^
                      source.ks keyword.operator.assignment.ks
                        
                       ^
                       source.ks
                        '
                        ^
                        source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                         foobar
                         ^^^^^^
                         source.ks string.quoted.single.ks
                               '
                               ^
                               source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                                )
                                ^
                                source.ks punctuation.definition.parameters.end.bracket.round.ks
                                  
                                 ^
                                 source.ks
                                  {
                                  ^
                                  source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks