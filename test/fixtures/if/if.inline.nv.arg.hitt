original file
-----------------------------------
var v1 = v2.substring(
    v2.lastIndexOf(
        c1
        if v2.contains(c2) {
            pick v2.indexOf(c2)
        }
        else {
            pick v2.length
        }
    ) + 1
    if v2.contains(c2) {
        pick v2.indexOf(c2, v2.lastIndexOf(c1, v2.indexOf(c2)))
    }
    else {
        pick v2.length
    }
)
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>var v1 = v2.substring(
 var
 ^^^
 source.ks storage.type.constant.ks
     
    ^
    source.ks
     v1
     ^^
     source.ks meta.definition.variable.ks variable.other.ks
        
       ^
       source.ks
        =
        ^
        source.ks keyword.operator.assignment.ks
          
         ^
         source.ks
          v2
          ^^
          source.ks variable.other.object.ks
            .
            ^
            source.ks punctuation.accessor.object.ks
             substring
             ^^^^^^^^^
             source.ks entity.name.function.ks
                      (
                      ^
                      source.ks punctuation.definition.arguments.begin.bracket.round.ks
>
>    v2.lastIndexOf(
     
 ^^^^
 source.ks
     v2
     ^^
     source.ks variable.other.object.ks
       .
       ^
       source.ks punctuation.accessor.object.ks
        lastIndexOf
        ^^^^^^^^^^^
        source.ks entity.name.function.ks
                   (
                   ^
                   source.ks punctuation.definition.arguments.begin.bracket.round.ks
>
>        c1
         
 ^^^^^^^^
 source.ks
         c1
         ^^
         source.ks variable.other.ks
>
>        if v2.contains(c2) {
         
 ^^^^^^^^
 source.ks
         if
         ^^
         source.ks keyword.control.conditional.if.ks
            
           ^
           source.ks
            v2
            ^^
            source.ks variable.other.object.ks
              .
              ^
              source.ks punctuation.accessor.object.ks
               contains
               ^^^^^^^^
               source.ks entity.name.function.ks
                       (
                       ^
                       source.ks punctuation.definition.arguments.begin.bracket.round.ks
                        c2
                        ^^
                        source.ks variable.other.ks
                          )
                          ^
                          source.ks punctuation.definition.arguments.end.bracket.round.ks
                            
                           ^
                           source.ks
                            {
                            ^
                            source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>            pick v2.indexOf(c2)
             
 ^^^^^^^^^^^^
 source.ks
             pick
             ^^^^
             source.ks keyword.control.flow.pick.ks
                  
                 ^
                 source.ks
                  v2
                  ^^
                  source.ks variable.other.object.ks
                    .
                    ^
                    source.ks punctuation.accessor.object.ks
                     indexOf
                     ^^^^^^^
                     source.ks entity.name.function.ks
                            (
                            ^
                            source.ks punctuation.definition.arguments.begin.bracket.round.ks
                             c2
                             ^^
                             source.ks variable.other.ks
                               )
                               ^
                               source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>        }
         
 ^^^^^^^^
 source.ks
         }
         ^
         source.ks punctuation.definition.block.end.bracket.curly.ks
>
>        else {
         
 ^^^^^^^^
 source.ks
         else
         ^^^^
         source.ks keyword.control.conditional.else.ks
              
             ^
             source.ks
              {
              ^
              source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>            pick v2.length
             
 ^^^^^^^^^^^^
 source.ks
             pick
             ^^^^
             source.ks keyword.control.flow.pick.ks
                  
                 ^
                 source.ks
                  v2
                  ^^
                  source.ks variable.other.object.ks
                    .
                    ^
                    source.ks punctuation.accessor.object.ks
                     length
                     ^^^^^^
                     source.ks variable.other.property.object.ks
>
>        }
         
 ^^^^^^^^
 source.ks
         }
         ^
         source.ks punctuation.definition.block.end.bracket.curly.ks
>
>    ) + 1
     
 ^^^^
 source.ks
     )
     ^
     source.ks punctuation.definition.arguments.end.bracket.round.ks
       
      ^
      source.ks
       +
       ^
       source.ks keyword.operator.arithmetic.ks
         
        ^
        source.ks
         1
         ^
         source.ks constant.numeric.decimal.ks
>
>    if v2.contains(c2) {
     
 ^^^^
 source.ks
     if
     ^^
     source.ks keyword.control.conditional.if.ks
        
       ^
       source.ks
        v2
        ^^
        source.ks variable.other.object.ks
          .
          ^
          source.ks punctuation.accessor.object.ks
           contains
           ^^^^^^^^
           source.ks entity.name.function.ks
                   (
                   ^
                   source.ks punctuation.definition.arguments.begin.bracket.round.ks
                    c2
                    ^^
                    source.ks variable.other.ks
                      )
                      ^
                      source.ks punctuation.definition.arguments.end.bracket.round.ks
                        
                       ^
                       source.ks
                        {
                        ^
                        source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>        pick v2.indexOf(c2, v2.lastIndexOf(c1, v2.indexOf(c2)))
         
 ^^^^^^^^
 source.ks
         pick
         ^^^^
         source.ks keyword.control.flow.pick.ks
              
             ^
             source.ks
              v2
              ^^
              source.ks variable.other.object.ks
                .
                ^
                source.ks punctuation.accessor.object.ks
                 indexOf
                 ^^^^^^^
                 source.ks entity.name.function.ks
                        (
                        ^
                        source.ks punctuation.definition.arguments.begin.bracket.round.ks
                         c2
                         ^^
                         source.ks variable.other.ks
                           ,
                           ^
                           source.ks punctuation.separator.comma.ks
                             
                            ^
                            source.ks
                             v2
                             ^^
                             source.ks variable.other.object.ks
                               .
                               ^
                               source.ks punctuation.accessor.object.ks
                                lastIndexOf
                                ^^^^^^^^^^^
                                source.ks entity.name.function.ks
                                           (
                                           ^
                                           source.ks punctuation.definition.arguments.begin.bracket.round.ks
                                            c1
                                            ^^
                                            source.ks variable.other.ks
                                              ,
                                              ^
                                              source.ks punctuation.separator.comma.ks
                                                
                                               ^
                                               source.ks
                                                v2
                                                ^^
                                                source.ks variable.other.object.ks
                                                  .
                                                  ^
                                                  source.ks punctuation.accessor.object.ks
                                                   indexOf
                                                   ^^^^^^^
                                                   source.ks entity.name.function.ks
                                                          (
                                                          ^
                                                          source.ks punctuation.definition.arguments.begin.bracket.round.ks
                                                           c2
                                                           ^^
                                                           source.ks variable.other.ks
                                                             )
                                                             ^
                                                             source.ks punctuation.definition.arguments.end.bracket.round.ks
                                                              )
                                                              ^
                                                              source.ks punctuation.definition.arguments.end.bracket.round.ks
                                                               )
                                                               ^
                                                               source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.block.end.bracket.curly.ks
>
>    else {
     
 ^^^^
 source.ks
     else
     ^^^^
     source.ks keyword.control.conditional.else.ks
          
         ^
         source.ks
          {
          ^
          source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>        pick v2.length
         
 ^^^^^^^^
 source.ks
         pick
         ^^^^
         source.ks keyword.control.flow.pick.ks
              
             ^
             source.ks
              v2
              ^^
              source.ks variable.other.object.ks
                .
                ^
                source.ks punctuation.accessor.object.ks
                 length
                 ^^^^^^
                 source.ks variable.other.property.object.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.block.end.bracket.curly.ks
>
>)
 )
 ^
 source.ks punctuation.definition.arguments.end.bracket.round.ks