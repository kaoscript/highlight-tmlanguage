original file
-----------------------------------
import 'foobar' for {
    type template = {
        compile(): Function
    }
}
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>import 'foobar' for {
 import
 ^^^^^^
 source.ks keyword.control.import.ks
        
       ^
       source.ks
        '
        ^
        source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
         foobar
         ^^^^^^
         source.ks string.quoted.single.ks
               '
               ^
               source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                 
                ^
                source.ks
                 for
                 ^^^
                 source.ks keyword.control.dependency.for.ks
                     
                    ^
                    source.ks
                     {
                     ^
                     source.ks punctuation.definition.import-specification.begin.bracket.curly.ks
>
>    type template = {
     
 ^^^^
 source.ks
     type
     ^^^^
     source.ks storage.modifier.type.ks
          
         ^
         source.ks
          template
          ^^^^^^^^
          source.ks storage.type.type.ks
                   
                  ^
                  source.ks
                   =
                   ^
                   source.ks keyword.operator.assignment.ks
                     
                    ^
                    source.ks
                     {
                     ^
                     source.ks punctuation.definition.object.begin.bracket.curly.ks
>
>        compile(): Function
         
 ^^^^^^^^
 source.ks
         compile
         ^^^^^^^
         source.ks entity.name.function.ks
                (
                ^
                source.ks punctuation.definition.parameters.begin.bracket.round.ks
                 )
                 ^
                 source.ks punctuation.definition.parameters.end.bracket.round.ks
                  :
                  ^
                  source.ks meta.function.return-type.ks keyword.operator.type.annotation.ks
                    
                   ^
                   source.ks meta.function.return-type.ks
                    Function
                    ^^^^^^^^
                    source.ks meta.function.return-type.ks support.type.primitive.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.object.end.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.import-specification.end.bracket.curly.ks