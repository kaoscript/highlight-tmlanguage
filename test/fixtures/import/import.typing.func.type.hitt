original file
-----------------------------------
type T =
    func(value: Number): Number |
    func(value: String): String

type U =
    async func(value: Number): Number |
    async func(value: String): String

import 'foobar' {
    foo(...)
    async bar()
    baz(...): T
    qux(): U
} => {
    foo: f1
    bar: b1
    baz: b2
    qux: q1
}

import 'barfoo' {
    func foo(...)
    async func bar()
    func baz: T
    func qux(): U
} => {
    foo: f1
    bar: b1
    baz: b2
    qux: q1
}
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>type T =
 type
 ^^^^
 source.ks storage.type.type.ks
      
     ^
     source.ks
      T
      ^
      source.ks entity.name.type.alias.ks
        
       ^
       source.ks
        =
        ^
        source.ks keyword.operator.assignment.ks
>
>    func(value: Number): Number |
     
 ^^^^
 source.ks
     func
     ^^^^
     source.ks storage.type.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          value
          ^^^^^
          source.ks variable.parameter.ks
               :
               ^
               source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
                 
                ^
                source.ks meta.type.annotation.ks
                 Number
                 ^^^^^^
                 source.ks meta.type.annotation.ks support.type.primitive.ks
                       )
                       ^
                       source.ks punctuation.definition.parameters.end.bracket.round.ks
                        :
                        ^
                        source.ks meta.function.return-type.ks keyword.operator.type.annotation.ks
                          
                         ^
                         source.ks meta.function.return-type.ks
                          Number
                          ^^^^^^
                          source.ks meta.function.return-type.ks support.type.primitive.ks
                                 
                                ^
                                source.ks
                                 |
                                 ^
                                 source.ks keyword.operator.type.union.ks
>
>    func(value: String): String
     
 ^^^^
 source.ks
     func
     ^^^^
     source.ks storage.type.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          value
          ^^^^^
          source.ks variable.parameter.ks
               :
               ^
               source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
                 
                ^
                source.ks meta.type.annotation.ks
                 String
                 ^^^^^^
                 source.ks meta.type.annotation.ks support.type.primitive.ks
                       )
                       ^
                       source.ks punctuation.definition.parameters.end.bracket.round.ks
                        :
                        ^
                        source.ks meta.function.return-type.ks keyword.operator.type.annotation.ks
                          
                         ^
                         source.ks meta.function.return-type.ks
                          String
                          ^^^^^^
                          source.ks meta.function.return-type.ks support.type.primitive.ks
>
>
 
 ^
 source.ks
>
>type U =
 type
 ^^^^
 source.ks storage.type.type.ks
      
     ^
     source.ks
      U
      ^
      source.ks entity.name.type.alias.ks
        
       ^
       source.ks
        =
        ^
        source.ks keyword.operator.assignment.ks
>
>    async func(value: Number): Number |
     
 ^^^^
 source.ks
     async
     ^^^^^
     source.ks storage.modifier.async.ks
           
          ^
          source.ks
           func
           ^^^^
           source.ks storage.type.function.ks
               (
               ^
               source.ks punctuation.definition.parameters.begin.bracket.round.ks
                value
                ^^^^^
                source.ks variable.parameter.ks
                     :
                     ^
                     source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
                       
                      ^
                      source.ks meta.type.annotation.ks
                       Number
                       ^^^^^^
                       source.ks meta.type.annotation.ks support.type.primitive.ks
                             )
                             ^
                             source.ks punctuation.definition.parameters.end.bracket.round.ks
                              :
                              ^
                              source.ks meta.function.return-type.ks keyword.operator.type.annotation.ks
                                
                               ^
                               source.ks meta.function.return-type.ks
                                Number
                                ^^^^^^
                                source.ks meta.function.return-type.ks support.type.primitive.ks
                                       
                                      ^
                                      source.ks
                                       |
                                       ^
                                       source.ks keyword.operator.type.union.ks
>
>    async func(value: String): String
     
 ^^^^
 source.ks
     async
     ^^^^^
     source.ks storage.modifier.async.ks
           
          ^
          source.ks
           func
           ^^^^
           source.ks storage.type.function.ks
               (
               ^
               source.ks punctuation.definition.parameters.begin.bracket.round.ks
                value
                ^^^^^
                source.ks variable.parameter.ks
                     :
                     ^
                     source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
                       
                      ^
                      source.ks meta.type.annotation.ks
                       String
                       ^^^^^^
                       source.ks meta.type.annotation.ks support.type.primitive.ks
                             )
                             ^
                             source.ks punctuation.definition.parameters.end.bracket.round.ks
                              :
                              ^
                              source.ks meta.function.return-type.ks keyword.operator.type.annotation.ks
                                
                               ^
                               source.ks meta.function.return-type.ks
                                String
                                ^^^^^^
                                source.ks meta.function.return-type.ks support.type.primitive.ks
>
>
 
 ^
 source.ks
>
>import 'foobar' {
 import
 ^^^^^^
 source.ks keyword.control.import.ks
        
       ^
       source.ks
        '
        ^
        source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
         foobar
         ^^^^^^
         source.ks string.quoted.single.ks
               '
               ^
               source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                 
                ^
                source.ks
                 {
                 ^
                 source.ks punctuation.definition.import-type.begin.bracket.curly.ks
>
>    foo(...)
     
 ^^^^
 source.ks
     foo
     ^^^
     source.ks entity.name.function.ks
        (
        ^
        source.ks punctuation.definition.parameters.begin.bracket.round.ks
         ...
         ^^^
         source.ks keyword.operator.rest.ks
            )
            ^
            source.ks punctuation.definition.parameters.end.bracket.round.ks
>
>    async bar()
     
 ^^^^
 source.ks
     async
     ^^^^^
     source.ks storage.modifier.async.ks
           
          ^
          source.ks
           bar
           ^^^
           source.ks entity.name.function.ks
              (
              ^
              source.ks punctuation.definition.parameters.begin.bracket.round.ks
               )
               ^
               source.ks punctuation.definition.parameters.end.bracket.round.ks
>
>    baz(...): T
     
 ^^^^
 source.ks
     baz
     ^^^
     source.ks entity.name.function.ks
        (
        ^
        source.ks punctuation.definition.parameters.begin.bracket.round.ks
         ...
         ^^^
         source.ks keyword.operator.rest.ks
            )
            ^
            source.ks punctuation.definition.parameters.end.bracket.round.ks
             :
             ^
             source.ks meta.function.return-type.ks keyword.operator.type.annotation.ks
               
              ^
              source.ks meta.function.return-type.ks
               T
               ^
               source.ks meta.function.return-type.ks entity.name.type.ks
>
>    qux(): U
     
 ^^^^
 source.ks
     qux
     ^^^
     source.ks entity.name.function.ks
        (
        ^
        source.ks punctuation.definition.parameters.begin.bracket.round.ks
         )
         ^
         source.ks punctuation.definition.parameters.end.bracket.round.ks
          :
          ^
          source.ks meta.function.return-type.ks keyword.operator.type.annotation.ks
            
           ^
           source.ks meta.function.return-type.ks
            U
            ^
            source.ks meta.function.return-type.ks entity.name.type.ks
>
>} => {
 }
 ^
 source.ks punctuation.definition.import-type.end.bracket.curly.ks
   
  ^
  source.ks
   =>
   ^^
   source.ks keyword.control.dependency.arrow.ks
      
     ^
     source.ks
      {
      ^
      source.ks punctuation.definition.binding-pattern.object.begin.bracket.curly.ks
>
>    foo: f1
     
 ^^^^
 source.ks
     foo
     ^^^
     source.ks variable.other.ks
        :
        ^
        source.ks punctuation.separator.key-value.ks
          
         ^
         source.ks
          f1
          ^^
          source.ks variable.other.ks
>
>    bar: b1
     
 ^^^^
 source.ks
     bar
     ^^^
     source.ks variable.other.ks
        :
        ^
        source.ks punctuation.separator.key-value.ks
          
         ^
         source.ks
          b1
          ^^
          source.ks variable.other.ks
>
>    baz: b2
     
 ^^^^
 source.ks
     baz
     ^^^
     source.ks variable.other.ks
        :
        ^
        source.ks punctuation.separator.key-value.ks
          
         ^
         source.ks
          b2
          ^^
          source.ks variable.other.ks
>
>    qux: q1
     
 ^^^^
 source.ks
     qux
     ^^^
     source.ks variable.other.ks
        :
        ^
        source.ks punctuation.separator.key-value.ks
          
         ^
         source.ks
          q1
          ^^
          source.ks variable.other.ks
>
>}
 }
 ^
 source.ks punctuation.definition.binding-pattern.object.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>import 'barfoo' {
 import
 ^^^^^^
 source.ks keyword.control.import.ks
        
       ^
       source.ks
        '
        ^
        source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
         barfoo
         ^^^^^^
         source.ks string.quoted.single.ks
               '
               ^
               source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                 
                ^
                source.ks
                 {
                 ^
                 source.ks punctuation.definition.import-type.begin.bracket.curly.ks
>
>    func foo(...)
     
 ^^^^
 source.ks
     func
     ^^^^
     source.ks storage.type.function.ks
          
         ^
         source.ks
          foo
          ^^^
          source.ks entity.name.function.ks
             (
             ^
             source.ks punctuation.definition.parameters.begin.bracket.round.ks
              ...
              ^^^
              source.ks keyword.operator.rest.ks
                 )
                 ^
                 source.ks punctuation.definition.parameters.end.bracket.round.ks
>
>    async func bar()
     
 ^^^^
 source.ks
     async
     ^^^^^
     source.ks storage.modifier.async.ks
           
          ^
          source.ks
           func
           ^^^^
           source.ks storage.type.function.ks
                
               ^
               source.ks
                bar
                ^^^
                source.ks entity.name.function.ks
                   (
                   ^
                   source.ks punctuation.definition.parameters.begin.bracket.round.ks
                    )
                    ^
                    source.ks punctuation.definition.parameters.end.bracket.round.ks
>
>    func baz: T
     
 ^^^^
 source.ks
     func
     ^^^^
     source.ks storage.type.function.ks
          
         ^
         source.ks
          baz
          ^^^
          source.ks entity.name.function.ks
             :
             ^
             source.ks meta.function.return-type.ks keyword.operator.type.annotation.ks
               
              ^
              source.ks meta.function.return-type.ks
               T
               ^
               source.ks meta.function.return-type.ks entity.name.type.ks
>
>    func qux(): U
     
 ^^^^
 source.ks
     func
     ^^^^
     source.ks storage.type.function.ks
          
         ^
         source.ks
          qux
          ^^^
          source.ks entity.name.function.ks
             (
             ^
             source.ks punctuation.definition.parameters.begin.bracket.round.ks
              )
              ^
              source.ks punctuation.definition.parameters.end.bracket.round.ks
               :
               ^
               source.ks meta.function.return-type.ks keyword.operator.type.annotation.ks
                 
                ^
                source.ks meta.function.return-type.ks
                 U
                 ^
                 source.ks meta.function.return-type.ks entity.name.type.ks
>
>} => {
 }
 ^
 source.ks punctuation.definition.import-type.end.bracket.curly.ks
   
  ^
  source.ks
   =>
   ^^
   source.ks keyword.control.dependency.arrow.ks
      
     ^
     source.ks
      {
      ^
      source.ks punctuation.definition.binding-pattern.object.begin.bracket.curly.ks
>
>    foo: f1
     
 ^^^^
 source.ks
     foo
     ^^^
     source.ks variable.other.ks
        :
        ^
        source.ks punctuation.separator.key-value.ks
          
         ^
         source.ks
          f1
          ^^
          source.ks variable.other.ks
>
>    bar: b1
     
 ^^^^
 source.ks
     bar
     ^^^
     source.ks variable.other.ks
        :
        ^
        source.ks punctuation.separator.key-value.ks
          
         ^
         source.ks
          b1
          ^^
          source.ks variable.other.ks
>
>    baz: b2
     
 ^^^^
 source.ks
     baz
     ^^^
     source.ks variable.other.ks
        :
        ^
        source.ks punctuation.separator.key-value.ks
          
         ^
         source.ks
          b2
          ^^
          source.ks variable.other.ks
>
>    qux: q1
     
 ^^^^
 source.ks
     qux
     ^^^
     source.ks variable.other.ks
        :
        ^
        source.ks punctuation.separator.key-value.ks
          
         ^
         source.ks
          q1
          ^^
          source.ks variable.other.ks
>
>}
 }
 ^
 source.ks punctuation.definition.binding-pattern.object.end.bracket.curly.ks