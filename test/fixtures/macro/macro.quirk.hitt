original file
-----------------------------------
const macros = {}

func addMacro(name, macro) {
    if macros[name] is Array {
        if macro.isFlag() {
        }

        macros[name].push(macro)

    }
    else {
        macros[name] = [macro]
    }
}

func getMacro(name, arguments) {
    if macros[name] is Array {
        for macro in macros[name] {
            if macro.matchArguments(data.arguments) {
                return macro
            }
        }
    }
}
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>const macros = {}
 const
 ^^^^^
 source.ks variable.other.ks
       
      ^
      source.ks
       macros
       ^^^^^^
       source.ks variable.other.ks
              
             ^
             source.ks
              =
              ^
              source.ks keyword.operator.assignment.ks
                
               ^
               source.ks
                {
                ^
                source.ks punctuation.definition.object.begin.bracket.curly.ks
                 }
                 ^
                 source.ks punctuation.definition.object.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func addMacro(name, macro) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      addMacro
      ^^^^^^^^
      source.ks entity.name.function.ks
              (
              ^
              source.ks punctuation.definition.parameters.begin.bracket.round.ks
               name
               ^^^^
               source.ks variable.parameter.ks
                   ,
                   ^
                   source.ks punctuation.separator.comma.ks
                     
                    ^
                    source.ks
                     macro
                     ^^^^^
                     source.ks variable.parameter.ks
                          )
                          ^
                          source.ks punctuation.definition.parameters.end.bracket.round.ks
                            
                           ^
                           source.ks
                            {
                            ^
                            source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    if macros[name] is Array {
     
 ^^^^
 source.ks
     if
     ^^
     source.ks keyword.control.conditional.if.ks
        
       ^
       source.ks
        macros
        ^^^^^^
        source.ks variable.other.ks
              [
              ^
              source.ks punctuation.accessor.array.begin.bracket.square.ks
               name
               ^^^^
               source.ks variable.other.ks
                   ]
                   ^
                   source.ks punctuation.accessor.array.end.bracket.square.ks
                     
                    ^
                    source.ks
                     is
                     ^^
                     source.ks keyword.operator.type-checking.ks
                        
                       ^
                       source.ks
                        Array
                        ^^^^^
                        source.ks support.type.primitive.ks
                              
                             ^
                             source.ks
                              {
                              ^
                              source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>        if macro.isFlag() {
         
 ^^^^^^^^
 source.ks
         if
         ^^
         source.ks keyword.control.conditional.if.ks
            
           ^
           source.ks
            macro
            ^^^^^
            source.ks variable.other.object.ks
                 .
                 ^
                 source.ks punctuation.accessor.object.ks
                  isFlag
                  ^^^^^^
                  source.ks entity.name.function.ks
                        (
                        ^
                        source.ks punctuation.definition.arguments.begin.bracket.round.ks
                         )
                         ^
                         source.ks punctuation.definition.arguments.end.bracket.round.ks
                           
                          ^
                          source.ks
                           {
                           ^
                           source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>        }
         
 ^^^^^^^^
 source.ks
         }
         ^
         source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>        macros[name].push(macro)
         
 ^^^^^^^^
 source.ks
         macros
         ^^^^^^
         source.ks variable.other.ks
               [
               ^
               source.ks punctuation.accessor.array.begin.bracket.square.ks
                name
                ^^^^
                source.ks variable.other.ks
                    ]
                    ^
                    source.ks punctuation.accessor.array.end.bracket.square.ks
                     .
                     ^
                     source.ks punctuation.accessor.object.ks
                      push
                      ^^^^
                      source.ks entity.name.function.ks
                          (
                          ^
                          source.ks punctuation.definition.arguments.begin.bracket.round.ks
                           macro
                           ^^^^^
                           source.ks variable.other.ks
                                )
                                ^
                                source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>
 
 ^
 source.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.block.end.bracket.curly.ks
>
>    else {
     
 ^^^^
 source.ks
     else
     ^^^^
     source.ks keyword.control.conditional.else.ks
          
         ^
         source.ks
          {
          ^
          source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>        macros[name] = [macro]
         
 ^^^^^^^^
 source.ks
         macros
         ^^^^^^
         source.ks variable.other.ks
               [
               ^
               source.ks punctuation.accessor.array.begin.bracket.square.ks
                name
                ^^^^
                source.ks variable.other.ks
                    ]
                    ^
                    source.ks punctuation.accessor.array.end.bracket.square.ks
                      
                     ^
                     source.ks
                      =
                      ^
                      source.ks keyword.operator.assignment.ks
                        
                       ^
                       source.ks
                        [
                        ^
                        source.ks punctuation.definition.array.begin.bracket.square.ks
                         macro
                         ^^^^^
                         source.ks variable.other.ks
                              ]
                              ^
                              source.ks punctuation.definition.array.end.bracket.square.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.block.end.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func getMacro(name, arguments) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      getMacro
      ^^^^^^^^
      source.ks entity.name.function.ks
              (
              ^
              source.ks punctuation.definition.parameters.begin.bracket.round.ks
               name
               ^^^^
               source.ks variable.parameter.ks
                   ,
                   ^
                   source.ks punctuation.separator.comma.ks
                     
                    ^
                    source.ks
                     arguments
                     ^^^^^^^^^
                     source.ks variable.parameter.ks
                              )
                              ^
                              source.ks punctuation.definition.parameters.end.bracket.round.ks
                                
                               ^
                               source.ks
                                {
                                ^
                                source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    if macros[name] is Array {
     
 ^^^^
 source.ks
     if
     ^^
     source.ks keyword.control.conditional.if.ks
        
       ^
       source.ks
        macros
        ^^^^^^
        source.ks variable.other.ks
              [
              ^
              source.ks punctuation.accessor.array.begin.bracket.square.ks
               name
               ^^^^
               source.ks variable.other.ks
                   ]
                   ^
                   source.ks punctuation.accessor.array.end.bracket.square.ks
                     
                    ^
                    source.ks
                     is
                     ^^
                     source.ks keyword.operator.type-checking.ks
                        
                       ^
                       source.ks
                        Array
                        ^^^^^
                        source.ks support.type.primitive.ks
                              
                             ^
                             source.ks
                              {
                              ^
                              source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>        for macro in macros[name] {
         
 ^^^^^^^^
 source.ks
         for
         ^^^
         source.ks keyword.control.loop.for.ks
             
            ^
            source.ks
             macro
             ^^^^^
             source.ks variable.other.ks
                   
                  ^
                  source.ks
                   in
                   ^^
                   source.ks keyword.operator.loop.in.ks
                      
                     ^
                     source.ks
                      macros
                      ^^^^^^
                      source.ks variable.other.ks
                            [
                            ^
                            source.ks punctuation.accessor.array.begin.bracket.square.ks
                             name
                             ^^^^
                             source.ks variable.other.ks
                                 ]
                                 ^
                                 source.ks punctuation.accessor.array.end.bracket.square.ks
                                   
                                  ^
                                  source.ks
                                   {
                                   ^
                                   source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>            if macro.matchArguments(data.arguments) {
             
 ^^^^^^^^^^^^
 source.ks
             if
             ^^
             source.ks keyword.control.conditional.if.ks
                
               ^
               source.ks
                macro
                ^^^^^
                source.ks variable.other.object.ks
                     .
                     ^
                     source.ks punctuation.accessor.object.ks
                      matchArguments
                      ^^^^^^^^^^^^^^
                      source.ks entity.name.function.ks
                                    (
                                    ^
                                    source.ks punctuation.definition.arguments.begin.bracket.round.ks
                                     data
                                     ^^^^
                                     source.ks variable.other.object.ks
                                         .
                                         ^
                                         source.ks punctuation.accessor.object.ks
                                          arguments
                                          ^^^^^^^^^
                                          source.ks variable.other.property.object.ks
                                                   )
                                                   ^
                                                   source.ks punctuation.definition.arguments.end.bracket.round.ks
                                                     
                                                    ^
                                                    source.ks
                                                     {
                                                     ^
                                                     source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>                return macro
                 
 ^^^^^^^^^^^^^^^^
 source.ks
                 return
                 ^^^^^^
                 source.ks keyword.control.flow.return.ks
                        
                       ^
                       source.ks
                        macro
                        ^^^^^
                        source.ks variable.other.ks
>
>            }
             
 ^^^^^^^^^^^^
 source.ks
             }
             ^
             source.ks punctuation.definition.block.end.bracket.curly.ks
>
>        }
         
 ^^^^^^^^
 source.ks
         }
         ^
         source.ks punctuation.definition.block.end.bracket.curly.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.block.end.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks