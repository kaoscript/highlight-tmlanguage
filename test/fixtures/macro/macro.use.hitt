original file
-----------------------------------
macro using_a(a: Identifier, e: Expression) {
    macro {
        (() => {
            var dyn #(a) = 42
            return #(e)
        })()
    }
}

var dyn four = using_a(a, a / 10)
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>macro using_a(a: Identifier, e: Expression) {
 macro
 ^^^^^
 source.ks meta.macro.ks storage.type.macro.ks
       
      ^
      source.ks meta.macro.ks
       using_a
       ^^^^^^^
       source.ks meta.macro.ks entity.name.type.macro.ks
              (
              ^
              source.ks meta.macro.ks punctuation.definition.parameters.begin.bracket.round.ks
               a
               ^
               source.ks meta.macro.ks variable.parameter.ks
                :
                ^
                source.ks meta.macro.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
                  
                 ^
                 source.ks meta.macro.ks meta.type.annotation.ks
                  Identifier
                  ^^^^^^^^^^
                  source.ks meta.macro.ks meta.type.annotation.ks support.type.macro.ks
                            ,
                            ^
                            source.ks meta.macro.ks punctuation.separator.comma.ks
                              
                             ^
                             source.ks meta.macro.ks
                              e
                              ^
                              source.ks meta.macro.ks variable.parameter.ks
                               :
                               ^
                               source.ks meta.macro.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
                                 
                                ^
                                source.ks meta.macro.ks meta.type.annotation.ks
                                 Expression
                                 ^^^^^^^^^^
                                 source.ks meta.macro.ks meta.type.annotation.ks support.type.macro.ks
                                           )
                                           ^
                                           source.ks meta.macro.ks punctuation.definition.parameters.end.bracket.round.ks
                                             
                                            ^
                                            source.ks meta.macro.ks
                                             {
                                             ^
                                             source.ks meta.macro.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    macro {
     
 ^^^^
 source.ks meta.macro.ks
     macro
     ^^^^^
     source.ks meta.macro.ks keyword.control.macro.ks
           
          ^
          source.ks meta.macro.ks
           {
           ^
           source.ks meta.macro.ks punctuation.definition.macro-expression.begin.bracket.curly.ks
>
>        (() => {
         
 ^^^^^^^^
 source.ks meta.macro.ks
         (
         ^
         source.ks meta.macro.ks punctuation.bracket.round.ks
          (
          ^
          source.ks meta.macro.ks punctuation.bracket.round.ks
           )
           ^
           source.ks meta.macro.ks punctuation.bracket.round.ks
             => 
            ^^^^
            source.ks meta.macro.ks
                {
                ^
                source.ks meta.macro.ks punctuation.bracket.curly.ks
>
>            var dyn #(a) = 42
             var dyn 
 ^^^^^^^^^^^^^^^^^^^^
 source.ks meta.macro.ks
                     #
                     ^
                     source.ks meta.macro.ks meta.macro.variable.ks punctuation.accessor.macro.ks
                      (
                      ^
                      source.ks meta.macro.ks meta.macro.variable.ks punctuation.definition.macro-variable.begin.bracket.round.ks
                       a
                       ^
                       source.ks meta.macro.ks meta.macro.variable.ks variable.other.ks
                        )
                        ^
                        source.ks meta.macro.ks meta.macro.variable.ks punctuation.definition.macro-variable.end.bracket.round.ks
                          = 42
                         ^^^^^^
                         source.ks meta.macro.ks
>
>            return #(e)
             return 
 ^^^^^^^^^^^^^^^^^^^
 source.ks meta.macro.ks
                    #
                    ^
                    source.ks meta.macro.ks meta.macro.variable.ks punctuation.accessor.macro.ks
                     (
                     ^
                     source.ks meta.macro.ks meta.macro.variable.ks punctuation.definition.macro-variable.begin.bracket.round.ks
                      e
                      ^
                      source.ks meta.macro.ks meta.macro.variable.ks variable.other.ks
                       )
                       ^
                       source.ks meta.macro.ks meta.macro.variable.ks punctuation.definition.macro-variable.end.bracket.round.ks
>
>        })()
         
 ^^^^^^^^
 source.ks meta.macro.ks
         }
         ^
         source.ks meta.macro.ks punctuation.bracket.curly.ks
          )
          ^
          source.ks meta.macro.ks punctuation.bracket.round.ks
           (
           ^
           source.ks meta.macro.ks punctuation.bracket.round.ks
            )
            ^
            source.ks meta.macro.ks punctuation.bracket.round.ks
>
>    }
     
 ^^^^
 source.ks meta.macro.ks
     }
     ^
     source.ks meta.macro.ks punctuation.definition.macro-expression.end.bracket.curly.ks
>
>}
 }
 ^
 source.ks meta.macro.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>var dyn four = using_a(a, a / 10)
 var 
 ^^^^
 source.ks storage.type.readwrite.ks
     dyn
     ^^^
     source.ks storage.type.readwrite.ks storage.modifier.dynamic.ks
         
        ^
        source.ks
         four
         ^^^^
         source.ks meta.definition.variable.ks variable.other.ks
              
             ^
             source.ks
              =
              ^
              source.ks keyword.operator.assignment.ks
                
               ^
               source.ks
                using_a
                ^^^^^^^
                source.ks entity.name.function.ks
                       (
                       ^
                       source.ks punctuation.definition.arguments.begin.bracket.round.ks
                        a
                        ^
                        source.ks variable.other.ks
                         ,
                         ^
                         source.ks punctuation.separator.comma.ks
                           
                          ^
                          source.ks
                           a
                           ^
                           source.ks variable.other.ks
                             
                            ^
                            source.ks
                             /
                             ^
                             source.ks keyword.operator.arithmetic.ks
                               
                              ^
                              source.ks
                               10
                               ^^
                               source.ks constant.numeric.decimal.ks
                                 )
                                 ^
                                 source.ks punctuation.definition.arguments.end.bracket.round.ks