original file
-----------------------------------
extern console
async func min() => 'female'
namespace foo {
    let gender: String = await min()
}
console.log(`\(foo.gender)`)
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>extern console
 extern
 ^^^^^^
 source.ks keyword.control.dependency.extern.ks
        
       ^
       source.ks
        console
        ^^^^^^^
        source.ks variable.other.constant.ks
>
>async func min() => 'female'
 async
 ^^^^^
 source.ks storage.modifier.async.ks
       
      ^
      source.ks
       func
       ^^^^
       source.ks storage.type.function.ks
            
           ^
           source.ks
            min
            ^^^
            source.ks entity.name.function.ks
               (
               ^
               source.ks punctuation.definition.parameters.begin.bracket.round.ks
                )
                ^
                source.ks punctuation.definition.parameters.end.bracket.round.ks
                  
                 ^
                 source.ks
                  =>
                  ^^
                  source.ks storage.type.function.arrow.ks
                     
                    ^
                    source.ks
                     '
                     ^
                     source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                      female
                      ^^^^^^
                      source.ks string.quoted.single.ks
                            '
                            ^
                            source.ks string.quoted.single.ks punctuation.definition.string.end.ks
>
>namespace foo {
 namespace
 ^^^^^^^^^
 source.ks storage.type.namespace.ks
           
          ^
          source.ks
           foo
           ^^^
           source.ks entity.name.type.namespace.ks
               
              ^
              source.ks
               {
               ^
               source.ks punctuation.definition.namespace.begin.bracket.curly.ks
>
>    let gender: String = await min()
     
 ^^^^
 source.ks
     let
     ^^^
     source.ks storage.type.readwrite.ks
         
        ^
        source.ks
         gender
         ^^^^^^
         source.ks meta.definition.variable.ks variable.other.readwrite.ks
               :
               ^
               source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
                 
                ^
                source.ks meta.type.annotation.ks
                 String
                 ^^^^^^
                 source.ks meta.type.annotation.ks support.type.primitive.ks
                        
                       ^
                       source.ks
                        =
                        ^
                        source.ks keyword.operator.assignment.ks
                          
                         ^
                         source.ks
                          await
                          ^^^^^
                          source.ks keyword.control.flow
                                
                               ^
                               source.ks
                                min
                                ^^^
                                source.ks entity.name.function.ks
                                   (
                                   ^
                                   source.ks punctuation.definition.arguments.begin.bracket.round.ks
                                    )
                                    ^
                                    source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>}
 }
 ^
 source.ks punctuation.definition.namespace.end.bracket.curly.ks
>
>console.log(`\(foo.gender)`)
 console
 ^^^^^^^
 source.ks variable.other.object.ks
        .
        ^
        source.ks punctuation.accessor.object.ks
         log
         ^^^
         source.ks entity.name.function.ks
            (
            ^
            source.ks punctuation.definition.arguments.begin.bracket.round.ks
             `
             ^
             source.ks punctuation.definition.string.template.begin.ks
              \(
              ^^
              source.ks punctuation.definition.template-expression.begin.ks
                foo
                ^^^
                source.ks variable.other.object.ks
                   .
                   ^
                   source.ks punctuation.accessor.object.ks
                    gender
                    ^^^^^^
                    source.ks variable.other.property.object.ks
                          )
                          ^
                          source.ks punctuation.definition.template-expression.end.ks
                           `
                           ^
                           source.ks punctuation.definition.string.template.end.ks
                            )
                            ^
                            source.ks punctuation.definition.arguments.end.bracket.round.ks