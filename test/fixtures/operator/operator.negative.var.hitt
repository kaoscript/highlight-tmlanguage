original file
-----------------------------------
func foo(x, y) {
    if !x {
        return y
    }
    else {
        return x
    }
}
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>func foo(x, y) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      foo
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           ,
           ^
           source.ks punctuation.separator.comma.ks
             
            ^
            source.ks
             y
             ^
             source.ks variable.parameter.ks
              )
              ^
              source.ks punctuation.definition.parameters.end.bracket.round.ks
                
               ^
               source.ks
                {
                ^
                source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>    if !x {
     
 ^^^^
 source.ks
     if
     ^^
     source.ks keyword.control.conditional.if.ks
        
       ^
       source.ks
        !
        ^
        source.ks keyword.operator.logical.ks
         x
         ^
         source.ks variable.other.ks
           
          ^
          source.ks
           {
           ^
           source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>        return y
         
 ^^^^^^^^
 source.ks
         return
         ^^^^^^
         source.ks keyword.control.flow.return.ks
                
               ^
               source.ks
                y
                ^
                source.ks variable.other.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.block.end.bracket.curly.ks
>
>    else {
     
 ^^^^
 source.ks
     else
     ^^^^
     source.ks keyword.control.conditional.else.ks
          
         ^
         source.ks
          {
          ^
          source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>        return x
         
 ^^^^^^^^
 source.ks
         return
         ^^^^^^
         source.ks keyword.control.flow.return.ks
                
               ^
               source.ks
                x
                ^
                source.ks variable.other.ks
>
>    }
     
 ^^^^
 source.ks
     }
     ^
     source.ks punctuation.definition.block.end.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks