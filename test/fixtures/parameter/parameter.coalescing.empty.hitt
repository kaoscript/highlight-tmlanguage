original file
-----------------------------------
func foo(x ##= 'abc') {
}

func foo(x? ##= 'abc') {
}

func foo(x: String ##= 'abc') {
}
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>func foo(x ##= 'abc') {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      foo
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
            
           ^
           source.ks
            ##=
            ^^^
            source.ks keyword.operator.assignment.compound.ks
                
               ^
               source.ks
                '
                ^
                source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                 abc
                 ^^^
                 source.ks string.quoted.single.ks
                    '
                    ^
                    source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                     )
                     ^
                     source.ks punctuation.definition.parameters.end.bracket.round.ks
                       
                      ^
                      source.ks
                       {
                       ^
                       source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func foo(x? ##= 'abc') {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      foo
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           ?
           ^
           source.ks storage.modifier.nullable.ks
             
            ^
            source.ks
             ##=
             ^^^
             source.ks keyword.operator.assignment.compound.ks
                 
                ^
                source.ks
                 '
                 ^
                 source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                  abc
                  ^^^
                  source.ks string.quoted.single.ks
                     '
                     ^
                     source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                      )
                      ^
                      source.ks punctuation.definition.parameters.end.bracket.round.ks
                        
                       ^
                       source.ks
                        {
                        ^
                        source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func foo(x: String ##= 'abc') {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      foo
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           :
           ^
           source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
             
            ^
            source.ks meta.type.annotation.ks
             String
             ^^^^^^
             source.ks meta.type.annotation.ks support.type.primitive.ks
                    
                   ^
                   source.ks
                    ##=
                    ^^^
                    source.ks keyword.operator.assignment.compound.ks
                        
                       ^
                       source.ks
                        '
                        ^
                        source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                         abc
                         ^^^
                         source.ks string.quoted.single.ks
                            '
                            ^
                            source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                             )
                             ^
                             source.ks punctuation.definition.parameters.end.bracket.round.ks
                               
                              ^
                              source.ks
                               {
                               ^
                               source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks