original file
-----------------------------------
func foo(_, x) {
}

func bar(x?, _, z?) {
}

func baz(x?, _?, z?) {
}

func qux(...{,3}items) {
}

func quux(...{1,3}items, x) {
}

func corge(...{3,}items) {
}

func grault(...{3}items) {
}
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>func foo(_, x) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      foo
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          _
          ^
          source.ks variable.anonymous.ks
           ,
           ^
           source.ks punctuation.separator.comma.ks
             
            ^
            source.ks
             x
             ^
             source.ks variable.parameter.ks
              )
              ^
              source.ks punctuation.definition.parameters.end.bracket.round.ks
                
               ^
               source.ks
                {
                ^
                source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func bar(x?, _, z?) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      bar
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           ?
           ^
           source.ks storage.modifier.nullable.ks
            ,
            ^
            source.ks punctuation.separator.comma.ks
              
             ^
             source.ks
              _
              ^
              source.ks variable.anonymous.ks
               ,
               ^
               source.ks punctuation.separator.comma.ks
                 
                ^
                source.ks
                 z
                 ^
                 source.ks variable.parameter.ks
                  ?
                  ^
                  source.ks storage.modifier.nullable.ks
                   )
                   ^
                   source.ks punctuation.definition.parameters.end.bracket.round.ks
                     
                    ^
                    source.ks
                     {
                     ^
                     source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func baz(x?, _?, z?) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      baz
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          x
          ^
          source.ks variable.parameter.ks
           ?
           ^
           source.ks storage.modifier.nullable.ks
            ,
            ^
            source.ks punctuation.separator.comma.ks
              
             ^
             source.ks
              _
              ^
              source.ks variable.anonymous.ks
               ?
               ^
               source.ks storage.modifier.nullable.ks
                ,
                ^
                source.ks punctuation.separator.comma.ks
                  
                 ^
                 source.ks
                  z
                  ^
                  source.ks variable.parameter.ks
                   ?
                   ^
                   source.ks storage.modifier.nullable.ks
                    )
                    ^
                    source.ks punctuation.definition.parameters.end.bracket.round.ks
                      
                     ^
                     source.ks
                      {
                      ^
                      source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func qux(...{,3}items) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      qux
      ^^^
      source.ks entity.name.function.ks
         (
         ^
         source.ks punctuation.definition.parameters.begin.bracket.round.ks
          ...
          ^^^
          source.ks keyword.operator.rest.ks
             {
             ^
             source.ks punctuation.definition.rest.begin.bracket.curly
              ,
              ^
              source.ks punctuation.separator.comma.ks
               3
               ^
               source.ks constant.numeric.decimal.ks
                }
                ^
                source.ks punctuation.definition.rest.end.bracket.curly
                 items
                 ^^^^^
                 source.ks variable.parameter.ks
                      )
                      ^
                      source.ks punctuation.definition.parameters.end.bracket.round.ks
                        
                       ^
                       source.ks
                        {
                        ^
                        source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func quux(...{1,3}items, x) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      quux
      ^^^^
      source.ks entity.name.function.ks
          (
          ^
          source.ks punctuation.definition.parameters.begin.bracket.round.ks
           ...
           ^^^
           source.ks keyword.operator.rest.ks
              {
              ^
              source.ks punctuation.definition.rest.begin.bracket.curly
               1
               ^
               source.ks constant.numeric.decimal.ks
                ,
                ^
                source.ks punctuation.separator.comma.ks
                 3
                 ^
                 source.ks constant.numeric.decimal.ks
                  }
                  ^
                  source.ks punctuation.definition.rest.end.bracket.curly
                   items
                   ^^^^^
                   source.ks variable.parameter.ks
                        ,
                        ^
                        source.ks punctuation.separator.comma.ks
                          
                         ^
                         source.ks
                          x
                          ^
                          source.ks variable.parameter.ks
                           )
                           ^
                           source.ks punctuation.definition.parameters.end.bracket.round.ks
                             
                            ^
                            source.ks
                             {
                             ^
                             source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func corge(...{3,}items) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      corge
      ^^^^^
      source.ks entity.name.function.ks
           (
           ^
           source.ks punctuation.definition.parameters.begin.bracket.round.ks
            ...
            ^^^
            source.ks keyword.operator.rest.ks
               {
               ^
               source.ks punctuation.definition.rest.begin.bracket.curly
                3
                ^
                source.ks constant.numeric.decimal.ks
                 ,
                 ^
                 source.ks punctuation.separator.comma.ks
                  }
                  ^
                  source.ks punctuation.definition.rest.end.bracket.curly
                   items
                   ^^^^^
                   source.ks variable.parameter.ks
                        )
                        ^
                        source.ks punctuation.definition.parameters.end.bracket.round.ks
                          
                         ^
                         source.ks
                          {
                          ^
                          source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>func grault(...{3}items) {
 func
 ^^^^
 source.ks storage.type.function.ks
      
     ^
     source.ks
      grault
      ^^^^^^
      source.ks entity.name.function.ks
            (
            ^
            source.ks punctuation.definition.parameters.begin.bracket.round.ks
             ...
             ^^^
             source.ks keyword.operator.rest.ks
                {
                ^
                source.ks punctuation.definition.rest.begin.bracket.curly
                 3
                 ^
                 source.ks constant.numeric.decimal.ks
                  }
                  ^
                  source.ks punctuation.definition.rest.end.bracket.curly
                   items
                   ^^^^^
                   source.ks variable.parameter.ks
                        )
                        ^
                        source.ks punctuation.definition.parameters.end.bracket.round.ks
                          
                         ^
                         source.ks
                          {
                          ^
                          source.ks punctuation.definition.block.begin.bracket.curly.ks
>
>}
 }
 ^
 source.ks punctuation.definition.block.end.bracket.curly.ks