original file
-----------------------------------
tuple Pair {
    x: String    = ''
    y: Number    = 0
}

tuple Triple extends Pair {
    z: Boolean    = false
}

var triple = Triple('x', 0.1, true)

console.log(triple.x, triple.y, triple.z)
-----------------------------------

grammar: kaoscript.tmLanguage
-----------------------------------
>
>tuple Pair {
 tuple
 ^^^^^
 source.ks storage.type.tuple.ks
       
      ^
      source.ks
       Pair
       ^^^^
       source.ks entity.name.type.tuple.ks
            
           ^
           source.ks
            {
            ^
            source.ks punctuation.definition.tuple.begin.bracket.curly.ks
>
>    x: String    = ''
     
 ^^^^
 source.ks
     x
     ^
     source.ks entity.name.variable.field.ks
      :
      ^
      source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
        
       ^
       source.ks meta.type.annotation.ks
        String
        ^^^^^^
        source.ks meta.type.annotation.ks support.type.primitive.ks
                  
              ^^^^
              source.ks meta.type.annotation.ks
                  =
                  ^
                  source.ks keyword.operator.assignment.ks
                    
                   ^
                   source.ks
                    '
                    ^
                    source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                     '
                     ^
                     source.ks string.quoted.single.ks punctuation.definition.string.end.ks
>
>    y: Number    = 0
     
 ^^^^
 source.ks
     y
     ^
     source.ks entity.name.variable.field.ks
      :
      ^
      source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
        
       ^
       source.ks meta.type.annotation.ks
        Number
        ^^^^^^
        source.ks meta.type.annotation.ks support.type.primitive.ks
                  
              ^^^^
              source.ks meta.type.annotation.ks
                  =
                  ^
                  source.ks keyword.operator.assignment.ks
                    
                   ^
                   source.ks
                    0
                    ^
                    source.ks constant.numeric.decimal.ks
>
>}
 }
 ^
 source.ks punctuation.definition.tuple.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>tuple Triple extends Pair {
 tuple
 ^^^^^
 source.ks storage.type.tuple.ks
       
      ^
      source.ks
       Triple
       ^^^^^^
       source.ks entity.name.type.tuple.ks
              
             ^
             source.ks
              extends
              ^^^^^^^
              source.ks storage.modifier.extends.ks
                      
                     ^
                     source.ks
                      Pair
                      ^^^^
                      source.ks entity.name.type.tuple.ks
                           
                          ^
                          source.ks
                           {
                           ^
                           source.ks punctuation.definition.tuple.begin.bracket.curly.ks
>
>    z: Boolean    = false
     
 ^^^^
 source.ks
     z
     ^
     source.ks entity.name.variable.field.ks
      :
      ^
      source.ks meta.type.annotation.ks keyword.operator.type.annotation.ks
        
       ^
       source.ks meta.type.annotation.ks
        Boolean
        ^^^^^^^
        source.ks meta.type.annotation.ks support.type.primitive.ks
                   
               ^^^^
               source.ks meta.type.annotation.ks
                   =
                   ^
                   source.ks keyword.operator.assignment.ks
                     
                    ^
                    source.ks
                     false
                     ^^^^^
                     source.ks constant.language.boolean.false.ks
>
>}
 }
 ^
 source.ks punctuation.definition.tuple.end.bracket.curly.ks
>
>
 
 ^
 source.ks
>
>var triple = Triple('x', 0.1, true)
 var
 ^^^
 source.ks storage.type.constant.ks
     
    ^
    source.ks
     triple
     ^^^^^^
     source.ks meta.definition.variable.ks variable.other.ks
            
           ^
           source.ks
            =
            ^
            source.ks keyword.operator.assignment.ks
              
             ^
             source.ks
              Triple
              ^^^^^^
              source.ks entity.name.function.ks
                    (
                    ^
                    source.ks punctuation.definition.arguments.begin.bracket.round.ks
                     '
                     ^
                     source.ks string.quoted.single.ks punctuation.definition.string.begin.ks
                      x
                      ^
                      source.ks string.quoted.single.ks
                       '
                       ^
                       source.ks string.quoted.single.ks punctuation.definition.string.end.ks
                        ,
                        ^
                        source.ks punctuation.separator.comma.ks
                          
                         ^
                         source.ks
                          0.1
                          ^^^
                          source.ks constant.numeric.decimal.ks
                             ,
                             ^
                             source.ks punctuation.separator.comma.ks
                               
                              ^
                              source.ks
                               true
                               ^^^^
                               source.ks constant.language.boolean.true.ks
                                   )
                                   ^
                                   source.ks punctuation.definition.arguments.end.bracket.round.ks
>
>
 
 ^
 source.ks
>
>console.log(triple.x, triple.y, triple.z)
 console
 ^^^^^^^
 source.ks variable.other.object.ks
        .
        ^
        source.ks punctuation.accessor.object.ks
         log
         ^^^
         source.ks entity.name.function.ks
            (
            ^
            source.ks punctuation.definition.arguments.begin.bracket.round.ks
             triple
             ^^^^^^
             source.ks variable.other.object.ks
                   .
                   ^
                   source.ks punctuation.accessor.object.ks
                    x
                    ^
                    source.ks variable.other.property.object.ks
                     ,
                     ^
                     source.ks punctuation.separator.comma.ks
                       
                      ^
                      source.ks
                       triple
                       ^^^^^^
                       source.ks variable.other.object.ks
                             .
                             ^
                             source.ks punctuation.accessor.object.ks
                              y
                              ^
                              source.ks variable.other.property.object.ks
                               ,
                               ^
                               source.ks punctuation.separator.comma.ks
                                 
                                ^
                                source.ks
                                 triple
                                 ^^^^^^
                                 source.ks variable.other.object.ks
                                       .
                                       ^
                                       source.ks punctuation.accessor.object.ks
                                        z
                                        ^
                                        source.ks variable.other.property.object.ks
                                         )
                                         ^
                                         source.ks punctuation.definition.arguments.end.bracket.round.ks